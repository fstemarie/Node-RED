[
    {
        "id": "2dbe54a8.332f04",
        "type": "tab",
        "label": "GameDeals",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1c9d8fd6.7a925",
        "type": "tab",
        "label": "Podcasts",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9fd980df2da67037",
        "type": "tab",
        "label": "IPTV",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "608d48c1c2c08ca6",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63d893f4.3e39a4",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "https://www.reddit.com/r/GameDeals/.json",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "/r/GameDeals",
        "payload": "{\"t\":\"week\",\"sort\":\"new\",\"limit\":25}",
        "payloadType": "json",
        "x": 105,
        "y": 140,
        "wires": [
            [
                "8b96914.cfa247"
            ]
        ],
        "l": false
    },
    {
        "id": "8b96914.cfa247",
        "type": "http request",
        "z": "2dbe54a8.332f04",
        "name": "reddit",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "d85f5c7c553769d3",
                "5050612b677962e7"
            ]
        ]
    },
    {
        "id": "464634ef.8dbb2c",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "filter",
        "func": "const posts = msg.payload.filter(x => {\n    let re = /(free)|(100)/ig\n    if (x.title.search(re) == -1)\n        return false\n    re = /(limited time)|(weekend)|(free to play)|(trial)|(buy)/ig\n    if (x.title.search(re) > -1)\n        return false\n    if (x.domain === \"self.GameDeals\")\n        return false\n\n    return true\n})\n\nif (posts.length) {\n    msg.payload = posts\n    return msg\n} else {\n    return null\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "7e83179aa3887405",
                "2b77768678a8412d"
            ]
        ],
        "icon": "node-red/rbe.png"
    },
    {
        "id": "d85f5c7c553769d3",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "prepare posts",
        "func": "// Aucun resultats\nif (msg.payload.data.children == 0) {\n    return null\n}\n\n// Nettoye l'objet msg\ndelete msg.url\ndelete msg.statusCode\ndelete msg.headers\ndelete msg.responseUrl\ndelete msg.redirectList\ndelete msg.retry\ndelete msg.responseCookies\n\n// Prepare l'objet a etre separe par posts\nmsg.payload = msg.payload.data.children.map(x => {\n    x = x.data\n    const post = {\n        title: x.title,\n        name: x.name,\n        permalink: x.permalink,\n        url: x.url,\n        domain: x.domain,\n        published: moment.unix(x.created_utc).toISOString()\n    }\n    return post\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "464634ef.8dbb2c"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "a3151e79522adcbf",
        "type": "http in",
        "z": "2dbe54a8.332f04",
        "name": "[get] /gamedeals.html",
        "url": "/gamedeals.html",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 300,
        "wires": [
            [
                "850c876f419ca8b7"
            ]
        ]
    },
    {
        "id": "123460247efec5fc",
        "type": "http response",
        "z": "2dbe54a8.332f04",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 300,
        "wires": []
    },
    {
        "id": "aeef8b2ffa8b97d2",
        "type": "file",
        "z": "2dbe54a8.332f04",
        "name": "write html",
        "filename": "/workspace/gamedeals/gamedeals.html",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 860,
        "y": 140,
        "wires": [
            [
                "ef487136ac51641d"
            ]
        ]
    },
    {
        "id": "850c876f419ca8b7",
        "type": "file in",
        "z": "2dbe54a8.332f04",
        "name": "read html",
        "filename": "/workspace/gamedeals/gamedeals.html",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 300,
        "wires": [
            [
                "123460247efec5fc"
            ]
        ]
    },
    {
        "id": "7e83179aa3887405",
        "type": "template",
        "z": "2dbe54a8.332f04",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> \n    <style>\n        body{\n            background-image: url(\"https://i.imgur.com/kHYmINz.png\");\n            background-repeat: scroll;\n            background-size: cover;\n        }\n        .card{\n            width: 50%;\n        }\n    </style>\n    <title>/r/GameDeals</title>\n</head>\n<body class=\"w3-container\" style=\"margin: 0 auto;\">\n    {{#payload}}\n    <div class=\"w3-card w3-white w3-leftbar w3-border-blue w3-padding w3-margin card\" style=\"margin: 0 auto;\">\n        <h3>{{title}}</h3>\n        <p class=\"w3-bar\">\n            <a href=\"http://www.reddit.com{{permalink}}\">Reddit link</a>\n            <a href=\"{{url}}\">Direct link</a>\n        </p>\n    </div>\n    {{/payload}}\n</body>\n</html>\n",
        "output": "str",
        "x": 700,
        "y": 140,
        "wires": [
            [
                "aeef8b2ffa8b97d2"
            ]
        ]
    },
    {
        "id": "51c93d396d3a9ae3",
        "type": "e-mail",
        "z": "2dbe54a8.332f04",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "fstemarie@gmail.com",
        "dname": "gmail",
        "x": 1050,
        "y": 220,
        "wires": []
    },
    {
        "id": "48ccd46cd7930ac5",
        "type": "template",
        "z": "2dbe54a8.332f04",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n<head>\n    <meta charset=\"utf-8\">\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> \n    <style>\n        body, html{\n            height: 100%;\n        }\n        body{\n            background-image: url(\"https://i.imgur.com/kHYmINz.png\");\n            background-repeat: no-repeat;\n            background-size: cover;\n        }\n    </style>\n    <title>/r/GameDeals</title>\n</head>\n<body class=\"w3-display-container\">\n    <div class=\"w3-display-container w3-container w3-display-middle w3-blue\">\n        <h1>Aucun nouveau jeux gratuit pour le moment...</h1>\n    </div>\n</body>\n</html>\n",
        "output": "str",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "b94ef37505493622"
            ]
        ]
    },
    {
        "id": "b94ef37505493622",
        "type": "file",
        "z": "2dbe54a8.332f04",
        "name": "write html",
        "filename": "/workspace/gamedeals/gamedeals.html",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 380,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ef487136ac51641d",
        "type": "debug",
        "z": "2dbe54a8.332f04",
        "name": "last",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 975,
        "y": 140,
        "wires": [],
        "l": false
    },
    {
        "id": "4b118e4d62ca1ecf",
        "type": "template",
        "z": "2dbe54a8.332f04",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> \n    <style>\n        body{\n            background-image: url(\"https://i.imgur.com/kHYmINz.png\");\n            background-repeat: scroll;\n            background-size: cover;\n        }\n        .card{\n            width: 50%;\n        }\n    </style>\n    <title>/r/GameDeals</title>\n</head>\n<body class=\"w3-container\" style=\"margin: 0 auto;\">\n    {{#payload}}\n    <div class=\"w3-card w3-white w3-leftbar w3-border-blue w3-padding w3-margin card\" style=\"margin: 0 auto;\">\n        <h3>{{title}}</h3>\n        <p class=\"w3-bar\">\n            <a href=\"http://www.reddit.com{{permalink}}\">Reddit link</a>\n            <a href=\"{{url}}\">Direct link</a>\n        </p>\n    </div>\n    {{/payload}}\n</body>\n</html>\n",
        "output": "str",
        "x": 900,
        "y": 220,
        "wires": [
            [
                "51c93d396d3a9ae3"
            ]
        ]
    },
    {
        "id": "2b77768678a8412d",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "filter prevPosts",
        "func": "let prevPosts = context.get('prevPosts')\nif (typeof prevPosts  === \"undefined\") prevPosts = new Map()\n\nif (prevPosts.size) {\n    // Clean up prevPosts\n    const now = new Date().getTime()\n    const days = 14 * 24 * 60 * 60 * 1000\n    for (let [name, ts] of prevPosts) {\n        const timeDiff = now - ts\n        if (timeDiff >= days) prevPosts.delete(name)\n    }\n}\n\nconst posts = msg.payload.filter(x => {\n    if (prevPosts.has(x.name)) {\n        return false\n    }\n    prevPosts.set(x.name, new Date(x.published).getTime())\n    return true\n})\ncontext.set(\"prevPosts\", prevPosts)\n\nif (posts.length) {\n    msg.payload = posts\n    return msg\n} else {\n    return null\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst PPFILE = \"/workspace/gamedeals/prevPosts.json\"\n\nconsole.log(\"On Start\")\n\nif (fs.existsSync(PPFILE)) {\n    let ppJSON = fs.readFileSync(PPFILE, \"utf8\")\n    if (ppJSON) {\n    let prevPosts = new Map(JSON.parse(ppJSON))\n        context.set(\"prevPosts\", prevPosts)\n        console.log(\"prevPosts = \", prevPosts)\n    }\n}\n",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nconsole.log(\"On Stop\")\n\nconst PPFILE = \"/workspace/gamedeals/prevPosts.json\"\nif (fs.existsSync(PPFILE)) {\n    fs.rmSync(PPFILE)\n}\nlet prevPosts = context.get(\"prevPosts\")\nif (typeof prevPosts  === \"undefined\") return\nif (!prevPosts.size) return\n\nlet ppJSON = JSON.stringify(Array.from(prevPosts.entries()))\nfs.writeFileSync(PPFILE, ppJSON, \"utf8\")\n",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "4b118e4d62ca1ecf",
                "13190664d47ece83"
            ]
        ],
        "icon": "node-red/rbe.png"
    },
    {
        "id": "d7fd9118089a99fd",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 105,
        "y": 220,
        "wires": [
            [
                "48ccd46cd7930ac5"
            ]
        ],
        "l": false
    },
    {
        "id": "9533eb590b9a4b8c",
        "type": "comment",
        "z": "2dbe54a8.332f04",
        "name": "https://nodered.iot/app/GameDeals.html",
        "info": "https://nodered.iot/app/GameDeals.html",
        "x": 320,
        "y": 360,
        "wires": []
    },
    {
        "id": "5050612b677962e7",
        "type": "debug",
        "z": "2dbe54a8.332f04",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 315,
        "y": 80,
        "wires": [],
        "l": false
    },
    {
        "id": "13190664d47ece83",
        "type": "debug",
        "z": "2dbe54a8.332f04",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 855,
        "y": 260,
        "wires": [],
        "l": false
    },
    {
        "id": "77ca3da606296b57",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "https://www.reddit.com/r/GameDeals/search/.json",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "/r/GameDeals",
        "payload": "{\"restrict_sr\":\"on\",\"t\":\"week\",\"sort\":\"new\",\"limit\":25,\"q\":\"free 100\"}",
        "payloadType": "json",
        "x": 105,
        "y": 360,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "9c97ba56c388dfaf",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "https://lemmy.world/api/v3/search",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/c/GameDeals",
        "payload": "{\"community_id\":1489,\"community_name\":\"gamedeals\",\"sort\":\"New\",\"q\":\"free or 100\"}",
        "payloadType": "json",
        "x": 105,
        "y": 680,
        "wires": [
            [
                "53d6582df57bba0f"
            ]
        ],
        "l": false
    },
    {
        "id": "53d6582df57bba0f",
        "type": "http request",
        "z": "2dbe54a8.332f04",
        "name": "lemmy.world",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 680,
        "wires": [
            [
                "9051c26c9a78be01"
            ]
        ]
    },
    {
        "id": "1a853615694a5861",
        "type": "debug",
        "z": "2dbe54a8.332f04",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 555,
        "y": 680,
        "wires": [],
        "l": false
    },
    {
        "id": "9051c26c9a78be01",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "prepare posts",
        "func": "let posts = msg.payload.posts.map(x => {\n    x = x.post\n    let post = {\n        id: x.id,\n        postLink: x.ap_id,\n        title: x.name,\n        url: x.url,\n        published: x.published\n    }\n    return post\n})\nmsg.payload = posts\n\ndelete msg.url\ndelete msg.headers\ndelete msg.statusCode\ndelete msg.responseUrl\ndelete msg.redirectList\ndelete msg.retry\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 680,
        "wires": [
            [
                "1a853615694a5861"
            ]
        ]
    },
    {
        "id": "9e5b56dd8c4458dd",
        "type": "feedparse",
        "z": "1c9d8fd6.7a925",
        "name": "HDTGM",
        "url": "https://feeds.simplecast.com/Ao0C24M8",
        "interval": "60",
        "ignorefirst": false,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "eee301fa151d5afd"
            ]
        ]
    },
    {
        "id": "b692c8aea70f56e0",
        "type": "http request",
        "z": "1c9d8fd6.7a925",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 420,
        "wires": [
            [
                "e046d8247f6f687d"
            ]
        ]
    },
    {
        "id": "f3cac49e20cd5ab8",
        "type": "file",
        "z": "1c9d8fd6.7a925",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 880,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "eee301fa151d5afd",
        "type": "function",
        "z": "1c9d8fd6.7a925",
        "name": "change",
        "func": "const re = /^(?<title>.*)@@(?<artist>.*)$/\nconst tags = {}\nconst year = moment(msg.article.pubDate)\nlet artist = \"\"\n\nmsg.title = msg.article.title\nlet title = msg.article.title.valueOf()\nlet matinee = (title.startsWith(\"Matinee Monday:\") || title.startsWith(\"Re-Release:\"))\ntitle = title\n    .replace(\"Matinee Monday:\", \"\")\n    .replace(\"Re-Release:\", \"\")\n    .replace(/\\s+/g, \" \")\n    .replace(/\\s*\\)$/, \"\")\n    .replace(/\\s*\\(?w\\/\\s*/, \"@@\")\n    .trim()\nif (re.test(title)) {\n    const groups = re.exec(title).groups\n    artist = groups.artist.trim()\n    title = groups.title.trim()\n}\n\nlet filename\nif (matinee) {\n    // filename = \"/podcasts/blabla - mm/\"\n    filename = \"/podcasts/How Did This Get Made - Matinee Monday/Matinee Monday_ \"\n    filename = filename + sanitize(title + \".mp3\")\n} else {\n    // filename = \"/podcasts/blabla/\"\n    filename = \"/podcasts/How Did This Get Made_/\"\n    filename = filename + sanitize(year.format('YYYY-MM-DD') + \" - \" + title + \".mp3\")\n}\nmsg.filename = filename\n\ntags.title = (matinee ? \"Matinee Monday: \":\"\") + title\ntags.artist = artist\ntags.album = \"How Did This Get Made?\"\ntags.performerInfo = \"Earwolf and Paul Scheer, June Diane Raphael, Jason Mantzoukas\"\ntags.year = year.format('YYYY-MM-DD')\ntags.trackNumber = year.format('YYYYMMDD')\ntags.image = \"/podcasts/How Did This Get Made_/folder.jpg\"\nmsg.tags = tags\nmsg.url = msg.article.enclosures[0].url\n\ndelete msg.article\nmsg.payload = '\"' + moment().toISOString() + '\",\"' + filename + '\",\"' + tags.year + '\",\"' + title + '\"'\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "sanitize",
                "module": "sanitize-filename"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 240,
        "y": 220,
        "wires": [
            [
                "a2d81e187fd86c28",
                "214c5a083f7d21a1"
            ]
        ]
    },
    {
        "id": "e046d8247f6f687d",
        "type": "function",
        "z": "1c9d8fd6.7a925",
        "name": "write tags",
        "func": "const tags = msg.tags\n\nlet buffer = msg.payload\nbuffer = NodeID3.write(tags, buffer)\nmsg.payload = buffer\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "NodeID3",
                "module": "node-id3"
            }
        ],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "f3cac49e20cd5ab8"
            ]
        ]
    },
    {
        "id": "a2d81e187fd86c28",
        "type": "debug",
        "z": "1c9d8fd6.7a925",
        "name": "change",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 355,
        "y": 180,
        "wires": [],
        "l": false
    },
    {
        "id": "214c5a083f7d21a1",
        "type": "function",
        "z": "1c9d8fd6.7a925",
        "name": "filter",
        "func": "let title = msg.title\n\nif (title == \"Find Full Archive of How Did This Get Made on Stitcher Premium\")\n    return null\nif (title.startsWith(\"Last Looks:\"))\n    return null\nif (fs.existsSync(msg.filename))\n    return null\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sanitize",
                "module": "sanitize"
            },
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "b692c8aea70f56e0",
                "3296fd95b3a73196"
            ]
        ]
    },
    {
        "id": "3296fd95b3a73196",
        "type": "debug",
        "z": "1c9d8fd6.7a925",
        "name": "filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 495,
        "y": 280,
        "wires": [],
        "l": false
    },
    {
        "id": "550e73879924ca9b",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Telecharge le podcast a toutes les heures",
        "info": "### How did this get made\n\nTelecharge le podcast a toutes les heures",
        "x": 340,
        "y": 120,
        "wires": []
    },
    {
        "id": "e5a1c823e1eb022d",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Prepare les informations et cree l'objet tags qui va contenir les tags ID3",
        "info": "",
        "x": 590,
        "y": 220,
        "wires": []
    },
    {
        "id": "da9d2e98fbfa89b5",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Filtre les episodes non desirees",
        "info": "",
        "x": 610,
        "y": 320,
        "wires": []
    },
    {
        "id": "d62cf278066096dd",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Telecharge les episodes qui n'ont pas ete filtrees",
        "info": "",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "4e2b888a326f5574",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Ecrit les tags ID3 dans le mp3",
        "info": "",
        "x": 940,
        "y": 520,
        "wires": []
    },
    {
        "id": "0d1e6801b78b0da2",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Sauve le fichier mp3 sur le disque",
        "info": "",
        "x": 1120,
        "y": 620,
        "wires": []
    },
    {
        "id": "474fca24b26a8869",
        "type": "complete",
        "z": "1c9d8fd6.7a925",
        "d": true,
        "name": "log",
        "scope": [
            "f3cac49e20cd5ab8"
        ],
        "uncaught": false,
        "x": 110,
        "y": 540,
        "wires": [
            [
                "3964538f7a598aed"
            ]
        ]
    },
    {
        "id": "3964538f7a598aed",
        "type": "template",
        "z": "1c9d8fd6.7a925",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{payload}}}",
        "output": "str",
        "x": 260,
        "y": 540,
        "wires": [
            [
                "1660c3d44194082d"
            ]
        ]
    },
    {
        "id": "1660c3d44194082d",
        "type": "file",
        "z": "1c9d8fd6.7a925",
        "name": "hdtgm.log",
        "filename": "/workspace/podcasts/hdtgm.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 420,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "8da5875d5fc460b2",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "https://i.mjh.nz/SamsungTVPlus/all.m3u8",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "m3u",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "3260ca7c9c4d27a2"
            ]
        ]
    },
    {
        "id": "3260ca7c9c4d27a2",
        "type": "http request",
        "z": "9fd980df2da67037",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "da09444ba290b779"
            ]
        ]
    },
    {
        "id": "28ed1dbcd92094f4",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 635,
        "y": 180,
        "wires": [],
        "l": false
    },
    {
        "id": "da09444ba290b779",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "Parse",
        "func": "if (msg.statusCode != 200 || !msg.payload) {\n    // Erreur\n    return null\n}\nlet lines = msg.payload.trim().split(/\\n/)\nif (!lines) {\n    // Erreur\n    return null\n}\nif (!lines[0].startsWith(\"#EXTM3U\")) {\n    // Erreur\n    return null\n}\ndelete msg.headers\ndelete msg.redirectList\ndelete msg.retry\n\nlet header = \"\", stream = \"\"\nlet streams = [], groups = []\nlet newStrm = false\nfor (const line of lines) {\n    if (line.startsWith(\"#EXTM3U\")) {\n        header = line\n    } else if (line.startsWith(\"#EXTINF\")) {\n        newStrm = true\n        stream = line\n    } else if (line.startsWith(\"#EXTGRP\")) {\n        groups.push(line)\n    } else if (line.startsWith(\"#\")) {\n        continue\n    } else {\n        if (!newStrm) continue\n        stream = stream + \" _|_ \" + line\n        streams.push(stream)\n    }\n}\n\nmsg.lines = lines\nmsg.header = header\nmsg.streams = streams\nmsg.groups = groups\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 180,
        "wires": [
            [
                "28ed1dbcd92094f4"
            ]
        ]
    },
    {
        "id": "a2398c8918f23bfb",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "m3u",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "m3u",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "249e3773a95bc15d"
            ]
        ]
    },
    {
        "id": "249e3773a95bc15d",
        "type": "http request",
        "z": "9fd980df2da67037",
        "name": "PlutoTV-us",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://i.mjh.nz/PlutoTV/us.m3u8",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "81b9d7649b7974a0"
            ]
        ]
    },
    {
        "id": "9473ef2f5eccb2b7",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 795,
        "y": 260,
        "wires": [],
        "l": false
    },
    {
        "id": "81b9d7649b7974a0",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "Parse",
        "func": "if (msg.statusCode != 200 || !msg.payload) {\n    // Erreur\n    node.error(\"HTTP request error\", msg);\n    return null\n}\nconst pl = iptvPlaylist.parseM3U(msg.payload)\n\nnode.send({topic: \"headers\", headers: pl.headers})\n// node.send([null, pl])\n\nfor (const channel of pl.channels) {\n    const GROUPS = new Set([\"Reality\", \"Big Brother Live\", \"Game Shows\", \"Daytime TV\",\n        \"News + Opinion\", \"Food\", \"Kids\", \"Gaming + Anime\", \"En Español\", \"Local News\"\n    ])\n    if (GROUPS.has(channel.groupTitle)) {\n        continue\n    }\n\n    const NAME = new Set([\n        \"BET Pluto TV\", \"BET Her\", \"OUTtv Proud\"\n    ])\n    if (NAME.has(channel.name)) {\n        continue\n    }\n    channel.topic = \"channel\"\n    node.send(channel)\n}\nnode.send({topic: \"end\"})\nnode.done()\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "iptvPlaylist",
                "module": "@iptv/playlist"
            }
        ],
        "x": 510,
        "y": 260,
        "wires": [
            [
                "6d638b5fad1543f3"
            ]
        ]
    },
    {
        "id": "6d638b5fad1543f3",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "join",
        "func": "if (msg.topic == \"headers\") {\n    context.set(\"headers\", msg.headers)\n}\nif (msg.topic == \"channel\") {\n    const channels = context.get(\"channels\") ?? []\n    channels.push(msg)\n    context.set(\"channels\", channels)\n}\nif (msg.topic == \"end\") {\n    const headers = context.get(\"headers\") ?? {}\n    const channels = context.get(\"channels\") ?? []\n    if (channels.length) {\n        let msg = {\n            topic: \"playlist\",\n            headers: headers,\n            channels: channels\n        }\n        return msg\n    }\n    return null\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"headers\", null)\ncontext.set(\"channels\", null)\n",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "9473ef2f5eccb2b7"
            ]
        ]
    },
    {
        "id": "3dc65f3a354fd372",
        "type": "inject",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "props": [
            {
                "p": "url",
                "v": "https://freebies.indiegala.com/broccoli-bob",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 145,
        "y": 160,
        "wires": [
            [
                "21ec93e00a729f6d"
            ]
        ],
        "l": false
    },
    {
        "id": "21ec93e00a729f6d",
        "type": "http request",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 160,
        "wires": [
            [
                "5ffc9d7b408926ff"
            ]
        ]
    },
    {
        "id": "5ffc9d7b408926ff",
        "type": "debug",
        "z": "608d48c1c2c08ca6",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 160,
        "wires": []
    },
    {
        "id": "1c3c54d29df06a05",
        "type": "debug",
        "z": "608d48c1c2c08ca6",
        "name": "prepare post",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 355,
        "y": 240,
        "wires": [],
        "l": false
    },
    {
        "id": "2de873c4f55a3fe7",
        "type": "http request",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 320,
        "wires": [
            [
                "9668d83246fd52ad"
            ]
        ]
    },
    {
        "id": "a3d76c861c253929",
        "type": "debug",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1035,
        "y": 320,
        "wires": [],
        "l": false
    },
    {
        "id": "9668d83246fd52ad",
        "type": "html",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "property": "payload",
        "outproperty": "metas",
        "tag": "head > meta",
        "ret": "attr",
        "as": "single",
        "x": 590,
        "y": 320,
        "wires": [
            [
                "5db4d34eb4075532"
            ]
        ]
    },
    {
        "id": "5db4d34eb4075532",
        "type": "function",
        "z": "608d48c1c2c08ca6",
        "name": "url preview",
        "func": "// delete msg.statusCode\n// delete msg.header\n// delete msg.headers\n// delete msg.responseUrl\n// delete msg.redirectList\n// delete msg.retry\n// delete msg.responseCookies\n\nlet metas = {}\nfor (let meta of msg.metas) {\n    if (\"property\" in meta) {\n        metas[meta.property] = meta.content\n    }\n    if (\"name\" in meta) {\n        metas[meta.name] = meta.content\n    }\n}\n\nlet preview = {}\npreview.title = metas[\"og:title\"] || metas[\"twitter:title\"] || metas[\"title\"]\npreview.description = metas[\"og:description\"] || metas[\"twitter:description\"] || metas[\"description\"]\npreview.thumbnail = metas[\"og:image\"] || metas[\"twitter:image\"] || metas[\"image_src\"]\nmsg.preview = preview\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "c18b41f7ad2dd40d"
            ]
        ]
    },
    {
        "id": "216b9731d59df8b0",
        "type": "inject",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"url\":\"https://store.epicgames.com/en-US/p/aliens-dark-descent\"},{\"url\":\"https://freebies.indiegala.com/broccoli-bob\"},{\"url\":\"https://www.gog.com/en/game/endless_space_2\"},{\"url\":\"https://store.steampowered.com/app/412020/Metro_Exodus/\"}]",
        "payloadType": "json",
        "x": 145,
        "y": 320,
        "wires": [
            [
                "4c4deff24a42ad8e"
            ]
        ],
        "l": false
    },
    {
        "id": "4c4deff24a42ad8e",
        "type": "function",
        "z": "608d48c1c2c08ca6",
        "name": "split",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n    const x = msg.payload[i]\n    x.parts = {\n        index: i,\n        count: msg.payload.length\n    }\n    node.send(x)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 320,
        "wires": [
            [
                "2de873c4f55a3fe7",
                "1c3c54d29df06a05"
            ]
        ]
    },
    {
        "id": "c18b41f7ad2dd40d",
        "type": "function",
        "z": "608d48c1c2c08ca6",
        "name": "join",
        "func": "let parts = context.get(\"parts\")\nif (!parts) parts = []\nparts.push(msg)\nif (parts.length < msg.parts.count) {\n    context.set(\"parts\", parts)\n} else {\n    let msg = {\n        topic: \"joined\",\n        payload: parts\n    }\n    context.set(\"parts\", undefined)\n    node.send(msg)\n    node.done()\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 320,
        "wires": [
            [
                "a3d76c861c253929"
            ]
        ]
    }
]