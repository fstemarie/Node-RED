[
    {
        "id": "2dbe54a8.332f04",
        "type": "tab",
        "label": "GameDeals",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1c9d8fd6.7a925",
        "type": "tab",
        "label": "Podcasts",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9fd980df2da67037",
        "type": "tab",
        "label": "IPTV m3u",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c58e172c38c3f313",
        "type": "tab",
        "label": "IPTV epg",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f9d291d72e4362b9",
        "type": "tab",
        "label": "falarie_bot",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "608d48c1c2c08ca6",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0f2dc18bd6b60182",
        "type": "subflow",
        "name": "parse m3u",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "65ce5291fc0e55f7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 80,
                "wires": [
                    {
                        "id": "8c392935b3941576",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c6b97c003c4dd14e",
        "type": "subflow",
        "name": "write m3u",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 80,
                "wires": [
                    {
                        "id": "6d638b5fad1543f3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 80,
                "wires": [
                    {
                        "id": "5ed518848689dc94",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "450e85d3c4e887ef",
        "type": "Stackhero-MySQL-Server",
        "name": "mariadb",
        "host": "db",
        "port": "3306",
        "tls": false,
        "database": "iptv"
    },
    {
        "id": "ed5efe6d8e7741eb",
        "type": "server",
        "name": "HomeAssistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": ": ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "default",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": false
    },
    {
        "id": "baa368f605b538b4",
        "type": "matrix-server-config",
        "name": "@falarie_bot:matrix.org",
        "autoAcceptRoomInvites": false,
        "enableE2ee": true,
        "global": true
    },
    {
        "id": "65ce5291fc0e55f7",
        "type": "http request",
        "z": "0f2dc18bd6b60182",
        "name": "[get] m3u",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "a85a1ec5ebd49c1e"
            ]
        ]
    },
    {
        "id": "a85a1ec5ebd49c1e",
        "type": "function",
        "z": "0f2dc18bd6b60182",
        "name": "parse",
        "func": "if (msg.statusCode != 200 || !msg.payload) {\n    // Erreur\n    node.error(\"HTTP request error\", msg);\n    return null\n}\nconst pl = iptvPlaylist.parseM3U(msg.payload)\nmsg.topic = \"headers\"\nmsg.payload = {headers: pl.headers}\nnode.send(msg)\n\nfor (const channel of pl.channels) {\n    let newmsg = {\n        topic: \"channel\",\n        payload: channel\n    }\n    node.send(newmsg)\n}\nnode.send({topic: \"end\"})\nnode.done()\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "iptvPlaylist",
                "module": "@iptv/playlist"
            }
        ],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "8c392935b3941576"
            ]
        ]
    },
    {
        "id": "8c392935b3941576",
        "type": "change",
        "z": "0f2dc18bd6b60182",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "responseUrl",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "statusCode",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "redirectList",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retry",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6d638b5fad1543f3",
        "type": "function",
        "z": "c6b97c003c4dd14e",
        "name": "join",
        "func": "if (msg.topic == \"headers\") {\n    context.set(\"headers\", msg)\n}\nif (msg.topic == \"channel\") {\n    const channels = context.get(\"channels\") ?? []\n    channels.push(msg.payload)\n    context.set(\"channels\", channels)\n}\nif (msg.topic == \"end\") {\n    const newmsg = context.get(\"headers\") ?? {}\n    const channels = context.get(\"channels\") ?? []\n    if (channels.length) {\n        newmsg.topic = \"playlist\"\n        newmsg.payload.channels = channels\n        return newmsg\n    }\n    return null\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"headers\", null)\ncontext.set(\"channels\", null)\n",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 80,
        "wires": [
            [
                "6e8c5c28b302c6cd"
            ]
        ]
    },
    {
        "id": "6e8c5c28b302c6cd",
        "type": "function",
        "z": "c6b97c003c4dd14e",
        "name": "stringify",
        "func": "if (msg.topic == \"playlist\"){\n    const pl = msg.payload\n    if (pl.headers[\"xTvgUrl\"]) {\n        pl.headers[\"url-tvg\"] = pl.headers[\"xTvgUrl\"]\n        delete pl.headers[\"xTvgUrl\"]\n    }\n    if (pl.headers[\"urlTvg\"]) {\n        pl.headers[\"url-tvg\"] = pl.headers[\"urlTvg\"]\n        delete pl.headers[\"urlTvg\"]\n    }\n\n    const m3u = iptvPlaylist.writeM3U(pl)\n    msg.topic = \"m3u\"\n    msg.playlist = pl\n    msg.payload = m3u\n    return msg\n}\nreturn null",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "iptvPlaylist",
                "module": "@iptv/playlist"
            }
        ],
        "x": 460,
        "y": 80,
        "wires": [
            [
                "5ed518848689dc94"
            ]
        ]
    },
    {
        "id": "5ed518848689dc94",
        "type": "file",
        "z": "c6b97c003c4dd14e",
        "name": "write",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 610,
        "y": 80,
        "wires": [
            [
                "f7e726fb34216982"
            ]
        ]
    },
    {
        "id": "f7e726fb34216982",
        "type": "debug",
        "z": "c6b97c003c4dd14e",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 160,
        "wires": []
    },
    {
        "id": "63d893f4.3e39a4",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "https://www.reddit.com/r/GameDeals/.json",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "/r/GameDeals",
        "payload": "{\"t\":\"week\",\"sort\":\"new\",\"limit\":25}",
        "payloadType": "json",
        "x": 105,
        "y": 140,
        "wires": [
            [
                "8b96914.cfa247"
            ]
        ],
        "l": false
    },
    {
        "id": "8b96914.cfa247",
        "type": "http request",
        "z": "2dbe54a8.332f04",
        "name": "reddit",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "d85f5c7c553769d3",
                "5050612b677962e7"
            ]
        ]
    },
    {
        "id": "464634ef.8dbb2c",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "filter",
        "func": "const posts = msg.payload.filter(x => {\n    let re = /(free)|(100)/ig\n    if (x.title.search(re) == -1)\n        return false\n    re = /(Itch.io)|(IndieGala)|(limited time)|(weekend)|(free to play)|(trial)|(buy)/ig\n    if (x.title.search(re) > -1)\n        return false\n    if (x.domain === \"self.GameDeals\")\n        return false\n\n    return true\n})\n\nif (posts.length) {\n    msg.payload = posts\n    return msg\n} else {\n    return null\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "7e83179aa3887405",
                "2b77768678a8412d"
            ]
        ],
        "icon": "node-red/rbe.png"
    },
    {
        "id": "d85f5c7c553769d3",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "prepare posts",
        "func": "// Aucun resultats\nif (msg.payload.data.children == 0) {\n    return null\n}\n\n// Nettoye l'objet msg\ndelete msg.url\ndelete msg.statusCode\ndelete msg.headers\ndelete msg.responseUrl\ndelete msg.redirectList\ndelete msg.retry\ndelete msg.responseCookies\n\n// Prepare l'objet a etre separe par posts\nmsg.payload = msg.payload.data.children.map(x => {\n    x = x.data\n    const post = {\n        title: x.title,\n        name: x.name,\n        permalink: x.permalink,\n        url: x.url,\n        domain: x.domain,\n        published: moment.unix(x.created_utc).toISOString()\n    }\n    return post\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "464634ef.8dbb2c"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "a3151e79522adcbf",
        "type": "http in",
        "z": "2dbe54a8.332f04",
        "name": "[get] gamedeals.html",
        "url": "/games/gamedeals.html",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 300,
        "wires": [
            [
                "850c876f419ca8b7"
            ]
        ]
    },
    {
        "id": "123460247efec5fc",
        "type": "http response",
        "z": "2dbe54a8.332f04",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 300,
        "wires": []
    },
    {
        "id": "aeef8b2ffa8b97d2",
        "type": "file",
        "z": "2dbe54a8.332f04",
        "name": "write html",
        "filename": "/workspace/gamedeals/gamedeals.html",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 860,
        "y": 140,
        "wires": [
            [
                "ef487136ac51641d"
            ]
        ]
    },
    {
        "id": "850c876f419ca8b7",
        "type": "file in",
        "z": "2dbe54a8.332f04",
        "name": "read html",
        "filename": "/workspace/gamedeals/gamedeals.html",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 300,
        "wires": [
            [
                "123460247efec5fc"
            ]
        ]
    },
    {
        "id": "7e83179aa3887405",
        "type": "template",
        "z": "2dbe54a8.332f04",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> \n    <style>\n        body{\n            background-image: url(\"https://i.imgur.com/kHYmINz.png\");\n            background-repeat: scroll;\n            background-size: cover;\n        }\n        .card{\n            width: 50%;\n        }\n    </style>\n    <title>/r/GameDeals</title>\n</head>\n<body class=\"w3-container\" style=\"margin: 0 auto;\">\n    {{#payload}}\n    <div class=\"w3-card w3-white w3-leftbar w3-border-blue w3-padding w3-margin card\" style=\"margin: 0 auto;\">\n        <h3>{{title}}</h3>\n        <p class=\"w3-bar\">\n            <a href=\"http://www.reddit.com{{permalink}}\">Reddit link</a>\n            <a href=\"{{url}}\">Direct link</a>\n        </p>\n    </div>\n    {{/payload}}\n</body>\n</html>\n",
        "output": "str",
        "x": 700,
        "y": 140,
        "wires": [
            [
                "aeef8b2ffa8b97d2"
            ]
        ]
    },
    {
        "id": "51c93d396d3a9ae3",
        "type": "e-mail",
        "z": "2dbe54a8.332f04",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "fstemarie@gmail.com; frstemarie@geeksquad.ca",
        "dname": "gmail",
        "x": 1050,
        "y": 220,
        "wires": []
    },
    {
        "id": "48ccd46cd7930ac5",
        "type": "template",
        "z": "2dbe54a8.332f04",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n<head>\n    <meta charset=\"utf-8\">\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> \n    <style>\n        body, html{\n            height: 100%;\n        }\n        body{\n            background-image: url(\"https://i.imgur.com/kHYmINz.png\");\n            background-repeat: no-repeat;\n            background-size: cover;\n        }\n    </style>\n    <title>/r/GameDeals</title>\n</head>\n<body class=\"w3-display-container\">\n    <div class=\"w3-display-container w3-container w3-display-middle w3-blue\">\n        <h1>Aucun nouveau jeux gratuit pour le moment...</h1>\n    </div>\n</body>\n</html>\n",
        "output": "str",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "b94ef37505493622"
            ]
        ]
    },
    {
        "id": "b94ef37505493622",
        "type": "file",
        "z": "2dbe54a8.332f04",
        "name": "write html",
        "filename": "/workspace/gamedeals/gamedeals.html",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 380,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ef487136ac51641d",
        "type": "debug",
        "z": "2dbe54a8.332f04",
        "name": "last",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 975,
        "y": 140,
        "wires": [],
        "l": false
    },
    {
        "id": "4b118e4d62ca1ecf",
        "type": "template",
        "z": "2dbe54a8.332f04",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> \n    <style>\n        body{\n            background-image: url(\"https://i.imgur.com/kHYmINz.png\");\n            background-repeat: scroll;\n            background-size: cover;\n        }\n        .card{\n            width: 50%;\n        }\n    </style>\n    <title>/r/GameDeals</title>\n</head>\n<body class=\"w3-container\" style=\"margin: 0 auto;\">\n    {{#payload}}\n    <div class=\"w3-card w3-white w3-leftbar w3-border-blue w3-padding w3-margin card\" style=\"margin: 0 auto;\">\n        <h3>{{title}}</h3>\n        <p class=\"w3-bar\">\n            <a href=\"http://www.reddit.com{{permalink}}\">Reddit link</a>\n            <a href=\"{{url}}\">Direct link</a>\n        </p>\n    </div>\n    {{/payload}}\n</body>\n</html>\n",
        "output": "str",
        "x": 900,
        "y": 220,
        "wires": [
            [
                "51c93d396d3a9ae3"
            ]
        ]
    },
    {
        "id": "2b77768678a8412d",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "filter prevPosts",
        "func": "let prevPosts = context.get('prevPosts')\nif (typeof prevPosts  === \"undefined\") prevPosts = new Map()\n\nif (prevPosts.size) {\n    // Clean up prevPosts\n    const now = new Date().getTime()\n    const days = 14 * 24 * 60 * 60 * 1000\n    for (let [name, ts] of prevPosts) {\n        const timeDiff = now - ts\n        if (timeDiff >= days) prevPosts.delete(name)\n    }\n}\n\nconst posts = msg.payload.filter(x => {\n    if (prevPosts.has(x.name)) {\n        return false\n    }\n    prevPosts.set(x.name, new Date(x.published).getTime())\n    return true\n})\ncontext.set(\"prevPosts\", prevPosts)\n\nif (posts.length) {\n    msg.payload = posts\n    return msg\n} else {\n    return null\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst PPFILE = \"/workspace/gamedeals/prevPosts.json\"\n\nconsole.log(\"On Start\")\n\nif (fs.existsSync(PPFILE)) {\n    let ppJSON = fs.readFileSync(PPFILE, \"utf8\")\n    if (ppJSON) {\n    let prevPosts = new Map(JSON.parse(ppJSON))\n        context.set(\"prevPosts\", prevPosts)\n        console.log(\"prevPosts = \", prevPosts)\n    }\n}\n",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nconsole.log(\"On Stop\")\n\nconst PPFILE = \"/workspace/gamedeals/prevPosts.json\"\nif (fs.existsSync(PPFILE)) {\n    fs.rmSync(PPFILE)\n}\nlet prevPosts = context.get(\"prevPosts\")\nif (typeof prevPosts  === \"undefined\") return\nif (!prevPosts.size) return\n\nlet ppJSON = JSON.stringify(Array.from(prevPosts.entries()))\nfs.writeFileSync(PPFILE, ppJSON, \"utf8\")\n",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "4b118e4d62ca1ecf",
                "13190664d47ece83"
            ]
        ],
        "icon": "node-red/rbe.png"
    },
    {
        "id": "d7fd9118089a99fd",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 105,
        "y": 220,
        "wires": [
            [
                "48ccd46cd7930ac5"
            ]
        ],
        "l": false
    },
    {
        "id": "9533eb590b9a4b8c",
        "type": "comment",
        "z": "2dbe54a8.332f04",
        "name": "http://nodered.iot/games/gamedeals.html",
        "info": "http://nodered.iot/games/gamedeals.html",
        "x": 320,
        "y": 360,
        "wires": []
    },
    {
        "id": "5050612b677962e7",
        "type": "debug",
        "z": "2dbe54a8.332f04",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 315,
        "y": 80,
        "wires": [],
        "l": false
    },
    {
        "id": "13190664d47ece83",
        "type": "debug",
        "z": "2dbe54a8.332f04",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 855,
        "y": 260,
        "wires": [],
        "l": false
    },
    {
        "id": "77ca3da606296b57",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "https://www.reddit.com/r/GameDeals/search/.json",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "/r/GameDeals",
        "payload": "{\"restrict_sr\":\"on\",\"t\":\"week\",\"sort\":\"new\",\"limit\":25,\"q\":\"free 100\"}",
        "payloadType": "json",
        "x": 105,
        "y": 360,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "9c97ba56c388dfaf",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "https://lemmy.world/api/v3/search",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/c/GameDeals",
        "payload": "{\"community_name\":\"gamedeals\",\"sort\":\"New\",\"q\":\"free or 100\"}",
        "payloadType": "json",
        "x": 105,
        "y": 680,
        "wires": [
            [
                "53d6582df57bba0f"
            ]
        ],
        "l": false
    },
    {
        "id": "53d6582df57bba0f",
        "type": "http request",
        "z": "2dbe54a8.332f04",
        "name": "lemmy.world",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 680,
        "wires": [
            [
                "9051c26c9a78be01"
            ]
        ]
    },
    {
        "id": "1a853615694a5861",
        "type": "debug",
        "z": "2dbe54a8.332f04",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 555,
        "y": 680,
        "wires": [],
        "l": false
    },
    {
        "id": "9051c26c9a78be01",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "prepare posts",
        "func": "let posts = msg.payload.posts.map(x => {\n    x = x.post\n    let post = {\n        id: x.id,\n        postLink: x.ap_id,\n        title: x.name,\n        url: x.url,\n        published: x.published\n    }\n    return post\n})\nmsg.payload = posts\n\ndelete msg.url\ndelete msg.headers\ndelete msg.statusCode\ndelete msg.responseUrl\ndelete msg.redirectList\ndelete msg.retry\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 680,
        "wires": [
            [
                "1a853615694a5861"
            ]
        ]
    },
    {
        "id": "9e5b56dd8c4458dd",
        "type": "feedparse",
        "z": "1c9d8fd6.7a925",
        "name": "HDTGM",
        "url": "https://feeds.simplecast.com/Ao0C24M8",
        "interval": "60",
        "ignorefirst": false,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "eee301fa151d5afd"
            ]
        ]
    },
    {
        "id": "b692c8aea70f56e0",
        "type": "http request",
        "z": "1c9d8fd6.7a925",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 420,
        "wires": [
            [
                "e046d8247f6f687d"
            ]
        ]
    },
    {
        "id": "f3cac49e20cd5ab8",
        "type": "file",
        "z": "1c9d8fd6.7a925",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 880,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "eee301fa151d5afd",
        "type": "function",
        "z": "1c9d8fd6.7a925",
        "name": "change",
        "func": "const re = /^(?<title>.*)@@(?<artist>.*)$/\nconst tags = {}\nconst year = moment(msg.article.pubDate)\nlet artist = \"\"\n\nmsg.title = msg.article.title\nlet title = msg.article.title.valueOf()\nlet matinee = (title.startsWith(\"Matinee Monday:\") || title.startsWith(\"Re-Release:\"))\ntitle = title\n    .replace(\"Matinee Monday:\", \"\")\n    .replace(\"Re-Release:\", \"\")\n    .replace(/\\s+/g, \" \")\n    .replace(/\\s*\\)$/, \"\")\n    .replace(/\\s*\\(?w\\/\\s*/, \"@@\")\n    .trim()\nif (re.test(title)) {\n    const groups = re.exec(title).groups\n    artist = groups.artist.trim()\n    title = groups.title.trim()\n}\n\nlet filename\nif (matinee) {\n    // filename = \"/podcasts/blabla - mm/\"\n    filename = \"/podcasts/How Did This Get Made - Matinee Monday/Matinee Monday_ \"\n    filename = filename + sanitize(title + \".mp3\")\n} else {\n    // filename = \"/podcasts/blabla/\"\n    filename = \"/podcasts/How Did This Get Made_/\"\n    filename = filename + sanitize(year.format('YYYY-MM-DD') + \" - \" + title + \".mp3\")\n}\nmsg.filename = filename\n\ntags.title = (matinee ? \"Matinee Monday: \":\"\") + title\ntags.artist = artist\ntags.album = \"How Did This Get Made?\"\ntags.performerInfo = \"Earwolf and Paul Scheer, June Diane Raphael, Jason Mantzoukas\"\ntags.year = year.format('YYYY-MM-DD')\ntags.trackNumber = year.format('YYYYMMDD')\ntags.image = \"/podcasts/How Did This Get Made_/folder.jpg\"\nmsg.tags = tags\nmsg.url = msg.article.enclosures[0].url\n\ndelete msg.article\nmsg.payload = '\"' + moment().toISOString() + '\",\"' + filename + '\",\"' + tags.year + '\",\"' + title + '\"'\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "sanitize",
                "module": "sanitize-filename"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 240,
        "y": 220,
        "wires": [
            [
                "a2d81e187fd86c28",
                "214c5a083f7d21a1"
            ]
        ]
    },
    {
        "id": "e046d8247f6f687d",
        "type": "function",
        "z": "1c9d8fd6.7a925",
        "name": "write tags",
        "func": "const tags = msg.tags\n\nlet buffer = msg.payload\nbuffer = NodeID3.write(tags, buffer)\nmsg.payload = buffer\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "NodeID3",
                "module": "node-id3"
            }
        ],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "f3cac49e20cd5ab8"
            ]
        ]
    },
    {
        "id": "a2d81e187fd86c28",
        "type": "debug",
        "z": "1c9d8fd6.7a925",
        "name": "change",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 355,
        "y": 180,
        "wires": [],
        "l": false
    },
    {
        "id": "214c5a083f7d21a1",
        "type": "function",
        "z": "1c9d8fd6.7a925",
        "name": "filter",
        "func": "let title = msg.title\n\nif (title == \"Find Full Archive of How Did This Get Made on Stitcher Premium\")\n    return null\nif (title.startsWith(\"Last Looks:\"))\n    return null\nif (fs.existsSync(msg.filename))\n    return null\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sanitize",
                "module": "sanitize"
            },
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "b692c8aea70f56e0",
                "3296fd95b3a73196"
            ]
        ]
    },
    {
        "id": "3296fd95b3a73196",
        "type": "debug",
        "z": "1c9d8fd6.7a925",
        "name": "filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 495,
        "y": 280,
        "wires": [],
        "l": false
    },
    {
        "id": "550e73879924ca9b",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Telecharge le podcast a toutes les heures",
        "info": "### How did this get made\n\nTelecharge le podcast a toutes les heures",
        "x": 340,
        "y": 120,
        "wires": []
    },
    {
        "id": "e5a1c823e1eb022d",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Prepare les informations et cree l'objet tags qui va contenir les tags ID3",
        "info": "",
        "x": 590,
        "y": 220,
        "wires": []
    },
    {
        "id": "da9d2e98fbfa89b5",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Filtre les episodes non desirees",
        "info": "",
        "x": 610,
        "y": 320,
        "wires": []
    },
    {
        "id": "d62cf278066096dd",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Telecharge les episodes qui n'ont pas ete filtrees",
        "info": "",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "4e2b888a326f5574",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Ecrit les tags ID3 dans le mp3",
        "info": "",
        "x": 940,
        "y": 520,
        "wires": []
    },
    {
        "id": "0d1e6801b78b0da2",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Sauve le fichier mp3 sur le disque",
        "info": "",
        "x": 1120,
        "y": 620,
        "wires": []
    },
    {
        "id": "474fca24b26a8869",
        "type": "complete",
        "z": "1c9d8fd6.7a925",
        "d": true,
        "name": "log",
        "scope": [
            "f3cac49e20cd5ab8"
        ],
        "uncaught": false,
        "x": 670,
        "y": 120,
        "wires": [
            [
                "3964538f7a598aed"
            ]
        ]
    },
    {
        "id": "3964538f7a598aed",
        "type": "template",
        "z": "1c9d8fd6.7a925",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{payload}}}",
        "output": "str",
        "x": 820,
        "y": 120,
        "wires": [
            [
                "1660c3d44194082d"
            ]
        ]
    },
    {
        "id": "1660c3d44194082d",
        "type": "file",
        "z": "1c9d8fd6.7a925",
        "name": "hdtgm.log",
        "filename": "/workspace/podcasts/hdtgm.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 980,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a2398c8918f23bfb",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "m3u",
        "props": [
            {
                "p": "url",
                "v": "https://i.mjh.nz/PlutoTV/us.m3u8",
                "vt": "str"
            },
            {
                "p": "filename",
                "v": "/workspace/iptv/i.mjh.nz-plutotv-us.m3u8",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "9303569c258e73e8"
            ]
        ]
    },
    {
        "id": "9473ef2f5eccb2b7",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 300,
        "wires": [],
        "l": false
    },
    {
        "id": "35e298a4bde4394e",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "filter",
        "func": "if (msg.topic == \"channel\") {\n    let channel = msg.payload\n\n    let names = new Set([\n        \"Fight\", \"Bellator MMA\", \"PFL MMA\",\n        \"IMPACT Wrestling\", \"GLORY Kickboxing\",\n    ])\n    let groups = new Set([\"Reality\", \"Big Brother Live\",\n        \"Game Shows\", \"Daytime TV\", \"Sports\", \"News + Opinion\",\n        \"Food\", \"Kids\", \"Gaming + Anime\", \"En Español\",\n        \"Local News\", \"Home\"\n    ])\n    if (groups.has(channel.groupTitle && !names.has(channel.name))) {\n        return null\n    }\n\n    names = new Set([\n        \"BET Pluto TV\", \"BET Her\", \"OUTtv Proud\",\n        \"Dogs 24/7\", \"Cats 24/7\", \"Faith TV\",\n        \"TBN\", \"CMT Equal Play\"\n    ])\n    if (names.has(channel.name)) {\n        return null\n    }\n\n    delete channel.extras[\"tvg-chno\"]\n    channel.name = channel.name += \" pt-us\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "18efedd335b894e2"
            ]
        ]
    },
    {
        "id": "47c1ad728e4627e1",
        "type": "file in",
        "z": "9fd980df2da67037",
        "name": "i.mjh.nz-plutotv-us.m3u8",
        "filename": "/workspace/iptv/i.mjh.nz-plutotv-us.m3u8",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 850,
        "y": 260,
        "wires": [
            [
                "bd550956093ad4f9"
            ]
        ]
    },
    {
        "id": "741b4e2e04058fe8",
        "type": "http in",
        "z": "9fd980df2da67037",
        "name": "i.mjh.nz-plutotv-us",
        "url": "/iptv/i.mjh.nz-plutotv-us.m3u",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 590,
        "y": 260,
        "wires": [
            [
                "47c1ad728e4627e1"
            ]
        ]
    },
    {
        "id": "bd550956093ad4f9",
        "type": "http response",
        "z": "9fd980df2da67037",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "text/plain"
        },
        "x": 1070,
        "y": 260,
        "wires": []
    },
    {
        "id": "ceab6718eef92516",
        "type": "comment",
        "z": "9fd980df2da67037",
        "name": "http://nodered.iot/iptv/i.mjh.nz-plutotv-us.m3u8",
        "info": "http://nodered.iot/iptv/i.mjh.nz-plutotv-us.m3u8",
        "x": 260,
        "y": 260,
        "wires": []
    },
    {
        "id": "9303569c258e73e8",
        "type": "subflow:0f2dc18bd6b60182",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 280,
        "y": 300,
        "wires": [
            [
                "35e298a4bde4394e"
            ]
        ]
    },
    {
        "id": "18efedd335b894e2",
        "type": "subflow:c6b97c003c4dd14e",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 580,
        "y": 300,
        "wires": [
            [
                "9473ef2f5eccb2b7"
            ]
        ]
    },
    {
        "id": "2754bcd7ef25b3d3",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "m3u",
        "props": [
            {
                "p": "url",
                "v": "https://i.mjh.nz/PlutoTV/fr.m3u8",
                "vt": "str"
            },
            {
                "p": "filename",
                "v": "/workspace/iptv/i.mjh.nz-plutotv-fr.m3u8",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "a52a676dba5816f8"
            ]
        ]
    },
    {
        "id": "448c61caa53faa7d",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 460,
        "wires": [],
        "l": false
    },
    {
        "id": "6a53a3f0a11467c0",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "filter",
        "func": "if (msg.topic == \"channel\") {\n    let channel = msg.payload\n\n    let names = new Set([\n        \"Gaming TV\", \"IGN\", \"Pluto TV Yoga\", \"Wellbeing TV\",\n    ])\n    if (names.has(channel.name)) {\n        return null\n    }\n\n    let groups = new Set([\n        \"Animation & Gaming\", \"TV Réalité\", \"Divertissement\",\n        \"Kids Max\", \"Kids\", \"Sports & Auto\", //\"News & Info\",\n        \"100% Français\"\n    ])\n    if (groups.has(channel.groupTitle)) {\n        return null\n    }\n\n    names = new Set([\n        \"South Park\", \"One Piece\"\n    ])\n    if (names.has(channel.name)) {\n        channel.groupTitle = \"Animation\"\n        return msg\n    }\n\n    delete channel.extras[\"tvg-chno\"]\n    channel.name = channel.name += \" pt-fr\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "0ee11473d207691a"
            ]
        ]
    },
    {
        "id": "aa5df3a0832c1714",
        "type": "file in",
        "z": "9fd980df2da67037",
        "name": "i.mjh.nz-plutotv-us.m3u8",
        "filename": "/workspace/iptv/i.mjh.nz-plutotv-us.m3u8",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 850,
        "y": 420,
        "wires": [
            [
                "e290c025c82831ce"
            ]
        ]
    },
    {
        "id": "b463780fd8481b4e",
        "type": "http in",
        "z": "9fd980df2da67037",
        "name": "i.mjh.nz-plutotv-fr",
        "url": "/iptv/i.mjh.nz-plutotv-fr.m3u",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 580,
        "y": 420,
        "wires": [
            [
                "aa5df3a0832c1714"
            ]
        ]
    },
    {
        "id": "e290c025c82831ce",
        "type": "http response",
        "z": "9fd980df2da67037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 420,
        "wires": []
    },
    {
        "id": "5137982cac7e9a24",
        "type": "comment",
        "z": "9fd980df2da67037",
        "name": "http://nodered.iot/iptv/i.mjh.nz-plutotv-fr.m3u8",
        "info": "http://nodered.iot/iptv/i.mjh.nz-plutotv-fr.m3u8",
        "x": 250,
        "y": 420,
        "wires": []
    },
    {
        "id": "a52a676dba5816f8",
        "type": "subflow:0f2dc18bd6b60182",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "6a53a3f0a11467c0"
            ]
        ]
    },
    {
        "id": "0ee11473d207691a",
        "type": "subflow:c6b97c003c4dd14e",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 580,
        "y": 460,
        "wires": [
            [
                "448c61caa53faa7d"
            ]
        ]
    },
    {
        "id": "cb60548db8a16097",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "m3u",
        "props": [
            {
                "p": "url",
                "v": "https://quebectele.com/canada.m3u",
                "vt": "str"
            },
            {
                "p": "filename",
                "v": "/workspace/iptv/quebectele.com-ca.m3u",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "194466d6d3faf704"
            ]
        ]
    },
    {
        "id": "45d3171e239a100e",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 940,
        "wires": [],
        "l": false
    },
    {
        "id": "eaae28a6dd3729d0",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "filter",
        "func": "if (msg.topic == \"channel\") {\n    let channel = msg.payload\n\n    let names = new Set ([\n        \"ICI Télé Est\", \"ICI Télé Ouest\", \"Canal Savoir\",\n        \"ICI Télé Acadie\", \"ICI Télé Alberta\", \"ICI Télé CB-Yukon\",\n        \"ICI Télé Est-Québec\", \"ICI Télé Estrie\", \"ICI Télé Manitoba\",\n        \"ICI Télé Mauricie\", \"ICI Télé Ontario\", \"ICI Télé Ottawa-Gatineau\",\n        \"ICI Télé Québec\", \"ICI Télé Saguenay\", \"ICI Télé Saskatchewan\",\n        \"RogersTV Moncton Français\", \"RogersTV Edmundston Français\",\n        \"RogersTV Ottawa Français\", \"Assemblée Nationale du QC\",\n        \"Ontario OLA Network | FR\", \"CPAC FR\"\n    ])\n    if (names.has(channel.name))\n        return null\n\n    if (channel.groupTitle == \"📺 Canada English\")\n        return null\n\n    if (channel.groupTitle == \"📺 Canada Français\")\n        channel.groupTitle = \"Canada Français\"\n\n    if (channel.groupTitle == \"📻 Radio Québécoise\")\n        channel.groupTitle = \"Radio Québécoise\"\n\n    if (channel.groupTitle == \"📺 Stingray Music\")\n        channel.groupTitle = \"Stingray Music\"\n\n    if (channel.groupTitle == \"📻 Music Bands\")\n        channel.groupTitle = \"Music Bands\"\n\n    if (channel.groupTitle == \"📻 181FM\")\n        channel.groupTitle = \"181FM\"\n\n    if (channel.groupTitle == \"📻 iHeart Radio\")\n        channel.groupTitle = \"iHeart Radio\"\n\n    if (channel.groupTitle == \"📻 Dash Radio\")\n        channel.groupTitle = \"Dash Radio\"\n\n    let groups = new Set([\n        \"Radio Québécoise\", \"Stingray Music\", \"Music Bands\",\n        \"181FM\", \"iHeart Radio\", \"Dash Radio\"\n    ])\n    if (groups.has(channel.groupTitle)) {\n        channel.extras.radio = true\n    }\n\n    delete channel.extras[\"tvg-chno\"]\n    channel.name = channel.name += \" qt-fr\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 940,
        "wires": [
            [
                "9b4c5cdf6f18fa26"
            ]
        ]
    },
    {
        "id": "a539a63f1094d9f7",
        "type": "file in",
        "z": "9fd980df2da67037",
        "name": "quebectele.com-ca.m3u",
        "filename": "/workspace/iptv/quebectele.com-ca.m3u",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 850,
        "y": 900,
        "wires": [
            [
                "910aa3e963d45289"
            ]
        ]
    },
    {
        "id": "d2400c06e56a852a",
        "type": "http in",
        "z": "9fd980df2da67037",
        "name": "quebectele.com-ca",
        "url": "/iptv/quebectele.com-ca.m3u",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 590,
        "y": 900,
        "wires": [
            [
                "a539a63f1094d9f7"
            ]
        ]
    },
    {
        "id": "910aa3e963d45289",
        "type": "http response",
        "z": "9fd980df2da67037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 900,
        "wires": []
    },
    {
        "id": "10b64747fc417777",
        "type": "comment",
        "z": "9fd980df2da67037",
        "name": "http://nodered.iot/iptv/quebectele.com-ca.m3u",
        "info": "http://nodered.iot/iptv/quebectele.com-ca.m3u",
        "x": 250,
        "y": 900,
        "wires": []
    },
    {
        "id": "194466d6d3faf704",
        "type": "subflow:0f2dc18bd6b60182",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 280,
        "y": 940,
        "wires": [
            [
                "eaae28a6dd3729d0"
            ]
        ]
    },
    {
        "id": "9b4c5cdf6f18fa26",
        "type": "subflow:c6b97c003c4dd14e",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 580,
        "y": 940,
        "wires": [
            [
                "45d3171e239a100e"
            ]
        ]
    },
    {
        "id": "ad791b91f63ffe16",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "m3u",
        "props": [
            {
                "p": "url",
                "v": "https://i.mjh.nz/SamsungTVPlus/us.m3u8",
                "vt": "str"
            },
            {
                "p": "filename",
                "v": "/workspace/iptv/i.mjh.nz-samsungtv-us.m3u8",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "82ab303896f18dec"
            ]
        ]
    },
    {
        "id": "d31a26c3c85c197d",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 620,
        "wires": [],
        "l": false
    },
    {
        "id": "9c91ee674a39766e",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "filter",
        "func": "if (msg.topic == \"channel\") {\n    let channel = msg.payload\n\n    let names = new Set([\n        \"Nosey\", \"Divorce Court\", \"The Bob Ross Channel\",\n        \"BET Pluto TV\", \"Ebony TV by Lionsgate\", \"ALLBLK Gems\",\n\n    ])\n    if (names.has(channel.name)) {\n        return null\n    }\n\n    let groups = new Set([\n        \"News & Opinion\", \"Game Shows\", \"Sports\",\n        \"Food, Home & Travel\", \"Reality TV\", \"Latino\",\n        \"Reality Competition\", \"Kids\", \n    ])\n    if (groups.has(channel.groupTitle)) {\n        return null\n    }\n\n    delete channel.extras[\"tvg-chno\"]\n    channel.name = channel.name += \" st-us\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 620,
        "wires": [
            [
                "b3a8921428003c90"
            ]
        ]
    },
    {
        "id": "bd6d12791ccf7d87",
        "type": "file in",
        "z": "9fd980df2da67037",
        "name": "i.mjh.nz-samsungtv-us.m3u8",
        "filename": "/workspace/iptv/i.mjh.nz-samsungtv-us.m3u8",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 860,
        "y": 580,
        "wires": [
            [
                "9305556581e90ce2"
            ]
        ]
    },
    {
        "id": "cc9858b60b1ab350",
        "type": "http in",
        "z": "9fd980df2da67037",
        "name": "i.mjh.nz-samsungtv-us",
        "url": "/iptv/i.mjh.nz-samsungtv-us.m3u",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 600,
        "y": 580,
        "wires": [
            [
                "bd6d12791ccf7d87"
            ]
        ]
    },
    {
        "id": "9305556581e90ce2",
        "type": "http response",
        "z": "9fd980df2da67037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "aa9d51c459eca468",
        "type": "comment",
        "z": "9fd980df2da67037",
        "name": "http://nodered.iot/iptv/i.mjh.nz-samsungtv-us.m3u8",
        "info": "http://nodered.iot/iptv/i.mjh.nz-samsungtv-us.m3u8",
        "x": 270,
        "y": 580,
        "wires": []
    },
    {
        "id": "82ab303896f18dec",
        "type": "subflow:0f2dc18bd6b60182",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 280,
        "y": 620,
        "wires": [
            [
                "9c91ee674a39766e"
            ]
        ]
    },
    {
        "id": "b3a8921428003c90",
        "type": "subflow:c6b97c003c4dd14e",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 580,
        "y": 620,
        "wires": [
            [
                "d31a26c3c85c197d"
            ]
        ]
    },
    {
        "id": "6828c4b5ff9d8325",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "m3u",
        "props": [
            {
                "p": "url",
                "v": "https://i.mjh.nz/SamsungTVPlus/fr.m3u8",
                "vt": "str"
            },
            {
                "p": "filename",
                "v": "/workspace/iptv/i.mjh.nz-samsungtv-fr.m3u8",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "86fb9dc390b159f0"
            ]
        ]
    },
    {
        "id": "acecef3740e7636d",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 780,
        "wires": [],
        "l": false
    },
    {
        "id": "2539a3fa8ab77ca4",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "filter",
        "func": "if (msg.topic == \"channel\") {\n    let channel = msg.payload\n\n    let names = new Set([\n        \"Televisa TeleNovelas\", \"Stormcast Novelas\",\n        \"Passion Novelas\", \"Fréquence Novelas\", \"Tele.Novela\"\n    ])\n    if (names.has(channel.name)) {\n        return null\n    }\n\n    let groups = new Set([\n        \"Divertissement\", \"Gastronomie\", \"Sport\", \"Jeunesse\",\n        \"LifeStyle\" //, \"Actualités\"\n    ])\n    if (groups.has(channel.groupTitle)) {\n        return null\n    }\n\n    delete channel.extras[\"tvg-chno\"]\n    channel.name = channel.name += \" st-fr\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 780,
        "wires": [
            [
                "684171d2845ec474"
            ]
        ]
    },
    {
        "id": "e424aa0738492b95",
        "type": "file in",
        "z": "9fd980df2da67037",
        "name": "i.mjh.nz-samsungtv-fr.m3u8",
        "filename": "/workspace/iptv/i.mjh.nz-samsungtv-fr.m3u8",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 860,
        "y": 740,
        "wires": [
            [
                "d191ba2860054bd8"
            ]
        ]
    },
    {
        "id": "8507d9558b6551da",
        "type": "http in",
        "z": "9fd980df2da67037",
        "name": "i.mjh.nz-samsungtv-fr",
        "url": "/iptv/i.mjh.nz-samsungtv-fr.m3u",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 600,
        "y": 740,
        "wires": [
            [
                "e424aa0738492b95"
            ]
        ]
    },
    {
        "id": "d191ba2860054bd8",
        "type": "http response",
        "z": "9fd980df2da67037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 740,
        "wires": []
    },
    {
        "id": "45e6b69358db6637",
        "type": "comment",
        "z": "9fd980df2da67037",
        "name": "http://nodered.iot/iptv/i.mjh.nz-samsungtv-fr.m3u8",
        "info": "http://nodered.iot/iptv/i.mjh.nz-samsungtv-fr.m3u8",
        "x": 260,
        "y": 740,
        "wires": []
    },
    {
        "id": "86fb9dc390b159f0",
        "type": "subflow:0f2dc18bd6b60182",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 280,
        "y": 780,
        "wires": [
            [
                "2539a3fa8ab77ca4"
            ]
        ]
    },
    {
        "id": "684171d2845ec474",
        "type": "subflow:c6b97c003c4dd14e",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 580,
        "y": 780,
        "wires": [
            [
                "acecef3740e7636d"
            ]
        ]
    },
    {
        "id": "06dcdb5e06351f57",
        "type": "http in",
        "z": "9fd980df2da67037",
        "name": "[get] /iptv/",
        "url": "/iptv",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "b848cb48963f6475"
            ]
        ]
    },
    {
        "id": "b848cb48963f6475",
        "type": "exec",
        "z": "9fd980df2da67037",
        "command": "ls /workspace/iptv/",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": true,
        "oldrc": false,
        "name": "ls iptv",
        "x": 290,
        "y": 120,
        "wires": [
            [
                "3df36e4bdec5c231"
            ],
            [],
            []
        ]
    },
    {
        "id": "db5f4fcfc40aea35",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "b848cb48963f6475"
            ]
        ]
    },
    {
        "id": "3e227f9.1d26",
        "type": "template",
        "z": "9fd980df2da67037",
        "name": "create dir index",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n<body>\n<h1>Directory Index</h1>\n{{#files}}\n    <div><a href=\"http://nodered.iot/iptv/{{{.}}}\">http://nodered.iot/iptv/{{{.}}}</a></div>\n{{/files}}\n</body>\n</html>",
        "output": "str",
        "x": 660,
        "y": 120,
        "wires": [
            [
                "27e8da3f0be8acd6"
            ]
        ]
    },
    {
        "id": "3df36e4bdec5c231",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "filter",
        "func": "const files = msg.payload.trim().split(os.EOL)\nmsg.payload = \"\"\nmsg.payload.files = msg.files = files\n\n// for (let file of files) {\n//     msg.files.push(file)\n// }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 450,
        "y": 120,
        "wires": [
            [
                "3e227f9.1d26"
            ]
        ]
    },
    {
        "id": "27e8da3f0be8acd6",
        "type": "http response",
        "z": "9fd980df2da67037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 120,
        "wires": []
    },
    {
        "id": "cb93b4b1f4673084",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "m3u",
        "props": [
            {
                "p": "url",
                "v": "https://iptv-org.github.io/iptv/subdivisions/ca-qc.m3u",
                "vt": "str"
            },
            {
                "p": "filename",
                "v": "/workspace/iptv/iptv-org-ca-qc.m3u",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "e2fc70a4eb4ed9c7"
            ]
        ]
    },
    {
        "id": "7c8971e7af07a263",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 1100,
        "wires": [],
        "l": false
    },
    {
        "id": "d39b81bcd45258e2",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "filter",
        "func": "if (msg.topic == \"channel\") {\n    let channel = msg.payload\n\n    // let names = new Set([\n    //     \"Televisa TeleNovelas\", \"Stormcast Novelas\",\n    //     \"Passion Novelas\", \"Fréquence Novelas\", \"Tele.Novela\"\n    // ])\n    // if (names.has(channel.name)) {\n    //     return null\n    // }\n\n    let groups = new Set([\n        \"Business\", \"Gastronomie\", \"Sport\", \"Jeunesse\",\n        \"LifeStyle\" //, \"Actualités\"\n    ])\n    if (groups.has(channel.groupTitle)) {\n        return null\n    }\n\n    // delete channel.extras[\"tvg-chno\"]\n    // channel.name = channel.name += \" iptv-org\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1100,
        "wires": [
            [
                "ab137a27d479e1c8"
            ]
        ]
    },
    {
        "id": "dd805d9d5f2dfbea",
        "type": "file in",
        "z": "9fd980df2da67037",
        "name": "iptv-org-ca-qc.m3u",
        "filename": "/workspace/iptv/iptv-org-ca-qc.m3u",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 830,
        "y": 1060,
        "wires": [
            [
                "3a4d183a1467b3e1"
            ]
        ]
    },
    {
        "id": "4479d6378e1773b9",
        "type": "http in",
        "z": "9fd980df2da67037",
        "name": "iptv-org-ca-qc.m3u",
        "url": "/iptv/iptv-org-ca-qc.m3u",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 590,
        "y": 1060,
        "wires": [
            [
                "dd805d9d5f2dfbea"
            ]
        ]
    },
    {
        "id": "3a4d183a1467b3e1",
        "type": "http response",
        "z": "9fd980df2da67037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4b2491645cb31846",
        "type": "comment",
        "z": "9fd980df2da67037",
        "name": "http://nodered.iot/iptv/iptv-org-ca-qc.m3u",
        "info": "http://nodered.iot/iptv/iptv-org-ca-qc.m3u",
        "x": 240,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e2fc70a4eb4ed9c7",
        "type": "subflow:0f2dc18bd6b60182",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 280,
        "y": 1100,
        "wires": [
            [
                "d39b81bcd45258e2"
            ]
        ]
    },
    {
        "id": "ab137a27d479e1c8",
        "type": "subflow:c6b97c003c4dd14e",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 580,
        "y": 1100,
        "wires": [
            [
                "7c8971e7af07a263"
            ]
        ]
    },
    {
        "id": "a3d053782f89b3e2",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "m3u",
        "props": [
            {
                "p": "url",
                "v": "https://iptv-org.github.io/iptv/countries/us.m3u",
                "vt": "str"
            },
            {
                "p": "filename",
                "v": "/workspace/iptv/iptv-org-us.m3u",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1260,
        "wires": [
            [
                "995cb1ad4e917188"
            ]
        ]
    },
    {
        "id": "97510212b99c9c28",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 1260,
        "wires": [],
        "l": false
    },
    {
        "id": "e1e36196f8d283b4",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "filter",
        "func": "if (msg.topic == \"channel\") {\n    let channel = msg.payload\n\n    // let names = new Set([\n    //     \"Televisa TeleNovelas\", \"Stormcast Novelas\",\n    //     \"Passion Novelas\", \"Fréquence Novelas\", \"Tele.Novela\"\n    // ])\n    // if (names.has(channel.name)) {\n    //     return null\n    // }\n\n    let groups = new Set([\n        \"Business\", \"Gastronomie\", \"Sport\", \"Jeunesse\",\n        \"LifeStyle\" //, \"Actualités\"\n    ])\n    if (groups.has(channel.groupTitle)) {\n        return null\n    }\n\n    // delete channel.extras[\"tvg-chno\"]\n    // channel.name = channel.name += \" iptv-org\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1260,
        "wires": [
            [
                "723fd82bb19c040d"
            ]
        ]
    },
    {
        "id": "c3126eeaf87852a5",
        "type": "file in",
        "z": "9fd980df2da67037",
        "name": "iptv-org-us.m3u",
        "filename": "/workspace/iptv/iptv-org-us.m3u",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 820,
        "y": 1220,
        "wires": [
            [
                "40bbd7a9f610321e"
            ]
        ]
    },
    {
        "id": "16f50157dd9917bc",
        "type": "http in",
        "z": "9fd980df2da67037",
        "name": "iptv-org-us.m3u",
        "url": "/iptv/iptv-org-us.m3u",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 580,
        "y": 1220,
        "wires": [
            [
                "c3126eeaf87852a5"
            ]
        ]
    },
    {
        "id": "40bbd7a9f610321e",
        "type": "http response",
        "z": "9fd980df2da67037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 1220,
        "wires": []
    },
    {
        "id": "eb4c79a480750222",
        "type": "comment",
        "z": "9fd980df2da67037",
        "name": "http://nodered.iot/iptv/iptv-org-us.m3u",
        "info": "http://nodered.iot/iptv/iptv-org-us.m3u",
        "x": 230,
        "y": 1220,
        "wires": []
    },
    {
        "id": "995cb1ad4e917188",
        "type": "subflow:0f2dc18bd6b60182",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 280,
        "y": 1260,
        "wires": [
            [
                "e1e36196f8d283b4"
            ]
        ]
    },
    {
        "id": "723fd82bb19c040d",
        "type": "subflow:c6b97c003c4dd14e",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 580,
        "y": 1260,
        "wires": [
            [
                "97510212b99c9c28"
            ]
        ]
    },
    {
        "id": "381a5e6736e20f0c",
        "type": "inject",
        "z": "9fd980df2da67037",
        "name": "m3u",
        "props": [
            {
                "p": "url",
                "v": "https://iptv-org.github.io/iptv/countries/fr.m3u",
                "vt": "str"
            },
            {
                "p": "filename",
                "v": "/workspace/iptv/iptv-org-fr.m3u",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1420,
        "wires": [
            [
                "96100c6d45457f33"
            ]
        ]
    },
    {
        "id": "a8e0048025d1236f",
        "type": "debug",
        "z": "9fd980df2da67037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 1420,
        "wires": [],
        "l": false
    },
    {
        "id": "6fbb5a0bd5475c1e",
        "type": "function",
        "z": "9fd980df2da67037",
        "name": "filter",
        "func": "if (msg.topic == \"channel\") {\n    let channel = msg.payload\n\n    // let names = new Set([\n    //     \"Televisa TeleNovelas\", \"Stormcast Novelas\",\n    //     \"Passion Novelas\", \"Fréquence Novelas\", \"Tele.Novela\"\n    // ])\n    // if (names.has(channel.name)) {\n    //     return null\n    // }\n\n    let groups = new Set([\n        \"Business\", \"Gastronomie\", \"Sport\", \"Jeunesse\",\n        \"LifeStyle\" //, \"Actualités\"\n    ])\n    if (groups.has(channel.groupTitle)) {\n        return null\n    }\n\n    // delete channel.extras[\"tvg-chno\"]\n    // channel.name = channel.name += \" iptv-org\"\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1420,
        "wires": [
            [
                "322c87d36050a043"
            ]
        ]
    },
    {
        "id": "24b3c038965c7b29",
        "type": "file in",
        "z": "9fd980df2da67037",
        "name": "iptv-org-fr.m3u",
        "filename": "/workspace/iptv/iptv-org-fr.m3u",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 820,
        "y": 1380,
        "wires": [
            [
                "e993cbc049c643d0"
            ]
        ]
    },
    {
        "id": "e791e768619a86d1",
        "type": "http in",
        "z": "9fd980df2da67037",
        "name": "iptv-org-fr.m3u",
        "url": "/iptv/iptv-org-fr.m3u",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 580,
        "y": 1380,
        "wires": [
            [
                "24b3c038965c7b29"
            ]
        ]
    },
    {
        "id": "e993cbc049c643d0",
        "type": "http response",
        "z": "9fd980df2da67037",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 1380,
        "wires": []
    },
    {
        "id": "812729f145caa9ef",
        "type": "comment",
        "z": "9fd980df2da67037",
        "name": "http://nodered.iot/iptv/iptv-org-us.m3u",
        "info": "http://nodered.iot/iptv/iptv-org-us.m3u",
        "x": 230,
        "y": 1380,
        "wires": []
    },
    {
        "id": "96100c6d45457f33",
        "type": "subflow:0f2dc18bd6b60182",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 280,
        "y": 1420,
        "wires": [
            [
                "6fbb5a0bd5475c1e"
            ]
        ]
    },
    {
        "id": "322c87d36050a043",
        "type": "subflow:c6b97c003c4dd14e",
        "z": "9fd980df2da67037",
        "name": "",
        "x": 580,
        "y": 1420,
        "wires": [
            [
                "a8e0048025d1236f"
            ]
        ]
    },
    {
        "id": "df42e51bea97c038",
        "type": "comment",
        "z": "9fd980df2da67037",
        "name": "http://nodered.iot/iptv",
        "info": "http://nodered.iot/iptv",
        "x": 340,
        "y": 60,
        "wires": []
    },
    {
        "id": "acce47c2d3a60231",
        "type": "xml",
        "z": "c58e172c38c3f313",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 510,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "de45ab453530afc8",
        "type": "http request",
        "z": "c58e172c38c3f313",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 60,
        "wires": [
            [
                "acce47c2d3a60231"
            ]
        ]
    },
    {
        "id": "14eb1c52515f4d72",
        "type": "inject",
        "z": "c58e172c38c3f313",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "de45ab453530afc8"
            ]
        ]
    },
    {
        "id": "189f81acd8b30944",
        "type": "matrix-room-invite",
        "z": "f9d291d72e4362b9",
        "name": "",
        "server": "baa368f605b538b4",
        "roomId": null,
        "x": 90,
        "y": 40,
        "wires": [
            [
                "3ce744cbfc6f1d0c"
            ]
        ]
    },
    {
        "id": "8bf6f839332b3525",
        "type": "matrix-join-room",
        "z": "f9d291d72e4362b9",
        "name": "",
        "server": "baa368f605b538b4",
        "x": 470,
        "y": 40,
        "wires": [
            [
                "93b84597eded25a1"
            ],
            []
        ]
    },
    {
        "id": "3ce744cbfc6f1d0c",
        "type": "function",
        "z": "f9d291d72e4362b9",
        "name": "Access control",
        "func": "const users = [\n    '@francois_stemarie:matrix.org',\n    '@philippe_stemarie:matrix.org'\n]\nif (!users.includes(msg.userId)) return null\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 40,
        "wires": [
            [
                "8bf6f839332b3525"
            ]
        ]
    },
    {
        "id": "e270db2fb81116e2",
        "type": "inject",
        "z": "f9d291d72e4362b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 600,
        "wires": [
            [
                "10b4a5409ca02f7b"
            ]
        ]
    },
    {
        "id": "10b4a5409ca02f7b",
        "type": "http request",
        "z": "f9d291d72e4362b9",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://qb/api/v2/torrents/info?filter=downloading",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 600,
        "wires": [
            [
                "e47484fee0f6f5bf"
            ]
        ]
    },
    {
        "id": "e47484fee0f6f5bf",
        "type": "debug",
        "z": "f9d291d72e4362b9",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 600,
        "wires": []
    },
    {
        "id": "6363e4332fb5f5fd",
        "type": "matrix-receive",
        "z": "f9d291d72e4362b9",
        "name": "",
        "server": "baa368f605b538b4",
        "roomId": "",
        "acceptText": true,
        "acceptEmotes": true,
        "acceptStickers": true,
        "acceptReactions": true,
        "acceptFiles": true,
        "acceptAudio": true,
        "acceptImages": true,
        "acceptVideos": true,
        "acceptLocations": true,
        "x": 100,
        "y": 100,
        "wires": [
            [
                "52624945d61ea21e"
            ]
        ]
    },
    {
        "id": "52624945d61ea21e",
        "type": "function",
        "z": "f9d291d72e4362b9",
        "name": "Access control",
        "func": "const users = [\n    '@francois_stemarie:matrix.org',\n    '@philippe_stemarie:matrix.org'\n]\nif (!users.includes(msg.userId)) return null\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "commander",
                "module": "commander"
            }
        ],
        "x": 300,
        "y": 100,
        "wires": [
            [
                "112c7d20beee9d55"
            ]
        ]
    },
    {
        "id": "ed5b847e62667bca",
        "type": "matrix-leave-room",
        "z": "f9d291d72e4362b9",
        "name": "",
        "server": "baa368f605b538b4",
        "roomId": null,
        "x": 330,
        "y": 280,
        "wires": [
            [
                "f590e3774e76965d"
            ],
            []
        ]
    },
    {
        "id": "93b84597eded25a1",
        "type": "debug",
        "z": "f9d291d72e4362b9",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 640,
        "y": 40,
        "wires": []
    },
    {
        "id": "e7c106caff0257fe",
        "type": "matrix-send-message",
        "z": "f9d291d72e4362b9",
        "name": "",
        "server": "baa368f605b538b4",
        "roomId": "",
        "message": "",
        "messageType": "m.text",
        "messageFormat": "",
        "replaceMessage": false,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "f590e3774e76965d"
            ],
            []
        ]
    },
    {
        "id": "112c7d20beee9d55",
        "type": "function",
        "z": "f9d291d72e4362b9",
        "name": "parse",
        "func": "function parse(command) {\n    command = command.trim()\n    let args = []\n    let token = \"\"\n    let quoted = false\n    for (let i = 0; i < command.length; i++) {\n        let c = command[i]\n        if (!quoted && c == \" \") {\n            args.push(token)\n            token = \"\"\n        } else if (!quoted && (c == '\"' || c == \"'\")) {\n            quoted = c\n        } else if (quoted == c) {\n            quoted = false\n        } else {\n            token = token.concat(c)\n        }\n    }\n    args.push(token)\n    return args\n}\nmsg.args = parse(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Commander",
                "module": "commander"
            }
        ],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "9c4d3e4245806203"
            ]
        ]
    },
    {
        "id": "f590e3774e76965d",
        "type": "debug",
        "z": "f9d291d72e4362b9",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 280,
        "wires": []
    },
    {
        "id": "8fb1a0bf126f1de7",
        "type": "inject",
        "z": "f9d291d72e4362b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test \"tes'ting\" 'bla bla'",
        "payloadType": "str",
        "x": 330,
        "y": 140,
        "wires": [
            [
                "112c7d20beee9d55"
            ]
        ]
    },
    {
        "id": "b3f1c117a7fa9cd8",
        "type": "matrix-receive",
        "z": "f9d291d72e4362b9",
        "name": "",
        "server": "baa368f605b538b4",
        "roomId": "",
        "acceptText": true,
        "acceptEmotes": true,
        "acceptStickers": true,
        "acceptReactions": true,
        "acceptFiles": true,
        "acceptAudio": true,
        "acceptImages": true,
        "acceptVideos": true,
        "acceptLocations": true,
        "x": 920,
        "y": 660,
        "wires": [
            [
                "d0ad2e818fa1a8a2"
            ]
        ]
    },
    {
        "id": "d0ad2e818fa1a8a2",
        "type": "debug",
        "z": "f9d291d72e4362b9",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 660,
        "wires": []
    },
    {
        "id": "9c4d3e4245806203",
        "type": "switch",
        "z": "f9d291d72e4362b9",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "!bye",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "!capue",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "!qb",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "ed5b847e62667bca"
            ],
            [
                "e7c106caff0257fe"
            ],
            [
                "f0cb22c0820f091d"
            ]
        ],
        "outputLabels": [
            "!qb",
            "!capue",
            null
        ]
    },
    {
        "id": "f0cb22c0820f091d",
        "type": "http request",
        "z": "f9d291d72e4362b9",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://qb.home/api/v2/torrents/info",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "4cec8a6d4ea5f7c6"
            ]
        ]
    },
    {
        "id": "4cec8a6d4ea5f7c6",
        "type": "json",
        "z": "f9d291d72e4362b9",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 400,
        "wires": [
            [
                "a42903710b91abd2",
                "6f935b204daf80fb"
            ]
        ]
    },
    {
        "id": "a42903710b91abd2",
        "type": "template",
        "z": "f9d291d72e4362b9",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Torrents\n{{#payload}}\n    Title: {{{name}}}\n    Category: {{{category}}}\n    Tags: {{{tags}}}\n    State: {{{state}}}\n    \n{{/payload}}\n",
        "output": "str",
        "x": 640,
        "y": 360,
        "wires": [
            [
                "391dfefab9cdaf6a"
            ]
        ]
    },
    {
        "id": "6f935b204daf80fb",
        "type": "debug",
        "z": "f9d291d72e4362b9",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 400,
        "wires": []
    },
    {
        "id": "391dfefab9cdaf6a",
        "type": "matrix-send-message",
        "z": "f9d291d72e4362b9",
        "name": "",
        "server": "baa368f605b538b4",
        "roomId": "",
        "message": "",
        "messageType": "m.text",
        "messageFormat": "",
        "replaceMessage": false,
        "x": 820,
        "y": 360,
        "wires": [
            [
                "6f935b204daf80fb"
            ],
            []
        ]
    },
    {
        "id": "3dc65f3a354fd372",
        "type": "inject",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "props": [
            {
                "p": "url",
                "v": "https://freebies.indiegala.com/broccoli-bob",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 145,
        "y": 160,
        "wires": [
            [
                "21ec93e00a729f6d"
            ]
        ],
        "l": false
    },
    {
        "id": "21ec93e00a729f6d",
        "type": "http request",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 160,
        "wires": [
            [
                "5ffc9d7b408926ff"
            ]
        ]
    },
    {
        "id": "5ffc9d7b408926ff",
        "type": "debug",
        "z": "608d48c1c2c08ca6",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 160,
        "wires": []
    },
    {
        "id": "1c3c54d29df06a05",
        "type": "debug",
        "z": "608d48c1c2c08ca6",
        "name": "prepare post",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 355,
        "y": 240,
        "wires": [],
        "l": false
    },
    {
        "id": "2de873c4f55a3fe7",
        "type": "http request",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 320,
        "wires": [
            [
                "9668d83246fd52ad"
            ]
        ]
    },
    {
        "id": "a3d76c861c253929",
        "type": "debug",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1035,
        "y": 320,
        "wires": [],
        "l": false
    },
    {
        "id": "9668d83246fd52ad",
        "type": "html",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "property": "payload",
        "outproperty": "metas",
        "tag": "head > meta",
        "ret": "attr",
        "as": "single",
        "x": 590,
        "y": 320,
        "wires": [
            [
                "5db4d34eb4075532"
            ]
        ]
    },
    {
        "id": "5db4d34eb4075532",
        "type": "function",
        "z": "608d48c1c2c08ca6",
        "name": "url preview",
        "func": "// delete msg.statusCode\n// delete msg.header\n// delete msg.headers\n// delete msg.responseUrl\n// delete msg.redirectList\n// delete msg.retry\n// delete msg.responseCookies\n\nlet metas = {}\nfor (let meta of msg.metas) {\n    if (\"property\" in meta) {\n        metas[meta.property] = meta.content\n    }\n    if (\"name\" in meta) {\n        metas[meta.name] = meta.content\n    }\n}\n\nlet preview = {}\npreview.title = metas[\"og:title\"] || metas[\"twitter:title\"] || metas[\"title\"]\npreview.description = metas[\"og:description\"] || metas[\"twitter:description\"] || metas[\"description\"]\npreview.thumbnail = metas[\"og:image\"] || metas[\"twitter:image\"] || metas[\"image_src\"]\nmsg.preview = preview\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "c18b41f7ad2dd40d"
            ]
        ]
    },
    {
        "id": "216b9731d59df8b0",
        "type": "inject",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"url\":\"https://store.epicgames.com/en-US/p/aliens-dark-descent\"},{\"url\":\"https://freebies.indiegala.com/broccoli-bob\"},{\"url\":\"https://www.gog.com/en/game/endless_space_2\"},{\"url\":\"https://store.steampowered.com/app/412020/Metro_Exodus/\"}]",
        "payloadType": "json",
        "x": 145,
        "y": 320,
        "wires": [
            [
                "4c4deff24a42ad8e"
            ]
        ],
        "l": false
    },
    {
        "id": "4c4deff24a42ad8e",
        "type": "function",
        "z": "608d48c1c2c08ca6",
        "name": "split",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n    const x = msg.payload[i]\n    x.parts = {\n        index: i,\n        count: msg.payload.length\n    }\n    node.send(x)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 320,
        "wires": [
            [
                "2de873c4f55a3fe7",
                "1c3c54d29df06a05"
            ]
        ]
    },
    {
        "id": "c18b41f7ad2dd40d",
        "type": "function",
        "z": "608d48c1c2c08ca6",
        "name": "join",
        "func": "let parts = context.get(\"parts\")\nif (!parts) parts = []\nparts.push(msg)\nif (parts.length < msg.parts.count) {\n    context.set(\"parts\", parts)\n} else {\n    let msg = {\n        topic: \"joined\",\n        payload: parts\n    }\n    context.set(\"parts\", undefined)\n    node.send(msg)\n    node.done()\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 320,
        "wires": [
            [
                "a3d76c861c253929"
            ]
        ]
    },
    {
        "id": "4d4682dc8ddb90ee",
        "type": "inject",
        "z": "608d48c1c2c08ca6",
        "name": "m3u",
        "props": [
            {
                "p": "url",
                "v": "https://quebectele.com/canada.m3u",
                "vt": "str"
            },
            {
                "p": "filename",
                "v": "/workspace/iptv/quebectele.com-ca.m3u",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "d742d4e654fbad3a"
            ]
        ]
    },
    {
        "id": "9f511d7d2e81dab6",
        "type": "debug",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 715,
        "y": 600,
        "wires": [],
        "l": false
    },
    {
        "id": "6eac0f8c86bc8713",
        "type": "Stackhero-MySQL",
        "z": "608d48c1c2c08ca6",
        "server": "450e85d3c4e887ef",
        "name": "",
        "x": 560,
        "y": 600,
        "wires": [
            [
                "9f511d7d2e81dab6"
            ]
        ]
    },
    {
        "id": "d742d4e654fbad3a",
        "type": "http request",
        "z": "608d48c1c2c08ca6",
        "name": "[get] m3u",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 260,
        "y": 600,
        "wires": [
            [
                "71bad9289c0af459"
            ]
        ]
    },
    {
        "id": "71bad9289c0af459",
        "type": "function",
        "z": "608d48c1c2c08ca6",
        "name": "parse",
        "func": "if (msg.statusCode != 200 || !msg.payload) {\n    // Erreur\n    node.error(\"HTTP request error\", msg);\n    return null\n}\nconst pl = iptvPlaylist.parseM3U(msg.payload)\n\nfor (const channel of pl.channels) {\n    channel.m3uUrl = msg.url\n    channel.xTvgUrl = msg.headers[\"xTvgUrl\"]\n    channel['xTvgUrl'] = msg.headers[\"xTvgUrl\"]\n    channel['tvgChno'] = channel.extras['tvg-chno']\n    channel['radio'] = channel.extras['radio']\n    let newmsg = {\n        topic: `\n        INSERT INTO channels (\\`m3u_url\\`, \\`x-tvg-url\\`, \\`tvg-chno\\`, name, \\`tvg-name\\`,\n            \\`group-title\\`, \\`tvg-id\\`, \\`tvg-logo\\`, radio)\n        VALUES (:m3uUrl, :xTvgUrl, :tvgChno, :name, :tvgName, :groupTitle, :tvgId, :tvgLogo, :radio);`,\n        payload: channel\n    }\n    node.send(newmsg)\n}\nnode.done()\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "iptvPlaylist",
                "module": "@iptv/playlist"
            }
        ],
        "x": 410,
        "y": 600,
        "wires": [
            [
                "6eac0f8c86bc8713"
            ]
        ]
    },
    {
        "id": "4417c0caccb0a04e",
        "type": "inject",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DELETE FROM channels",
        "x": 350,
        "y": 640,
        "wires": [
            [
                "6eac0f8c86bc8713"
            ]
        ]
    },
    {
        "id": "2adb087b18b0d7cd",
        "type": "xml",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 470,
        "y": 820,
        "wires": [
            [
                "84dc367f9a43d2da"
            ]
        ]
    },
    {
        "id": "495f383bf45010e6",
        "type": "inject",
        "z": "608d48c1c2c08ca6",
        "name": "HDTGM",
        "props": [
            {
                "p": "url",
                "v": "https://feeds.simplecast.com/Ao0C24M8",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "hdtgm",
        "x": 110,
        "y": 820,
        "wires": [
            [
                "a72c6d1091695ae0"
            ]
        ]
    },
    {
        "id": "a72c6d1091695ae0",
        "type": "http request",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 820,
        "wires": [
            [
                "2adb087b18b0d7cd"
            ]
        ]
    },
    {
        "id": "84dc367f9a43d2da",
        "type": "debug",
        "z": "608d48c1c2c08ca6",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 820,
        "wires": []
    },
    {
        "id": "85efa98d6db4078f",
        "type": "inject",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "props": [
            {
                "p": "enable",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "1ea89ebc728e1dec"
            ]
        ]
    },
    {
        "id": "1ea89ebc728e1dec",
        "type": "ha-fire-event",
        "z": "608d48c1c2c08ca6",
        "name": "",
        "server": "ed5efe6d8e7741eb",
        "version": 0,
        "event": "blabla",
        "data": "{\t    \"blep\": \"bleep blop bloop\"\t}",
        "dataType": "jsonata",
        "x": 330,
        "y": 380,
        "wires": [
            []
        ]
    }
]