[
    {
        "id": "2dbe54a8.332f04",
        "type": "tab",
        "label": "/r/GameDeals",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1c9d8fd6.7a925",
        "type": "tab",
        "label": "Podcasts",
        "disabled": false,
        "info": ""
    },
    {
        "id": "790250a5.c8101",
        "type": "tab",
        "label": "Basic Web Page",
        "disabled": false,
        "info": ""
    },
    {
        "id": "63d893f4.3e39a4",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 85,
        "y": 60,
        "wires": [
            [
                "9a2c3803a22719e6"
            ]
        ],
        "l": false
    },
    {
        "id": "8b96914.cfa247",
        "type": "http request",
        "z": "2dbe54a8.332f04",
        "name": "reddit",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 60,
        "wires": [
            [
                "d85f5c7c553769d3"
            ]
        ]
    },
    {
        "id": "bdef534b.d33f5",
        "type": "split",
        "z": "2dbe54a8.332f04",
        "name": "array to posts",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 780,
        "y": 60,
        "wires": [
            [
                "464634ef.8dbb2c"
            ]
        ]
    },
    {
        "id": "464634ef.8dbb2c",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "filter",
        "func": "let re\n\nre = /(limited time)|(weekend)|(free to play)|(trial)|(buy)/ig;\nif (msg.payload.title.search(re) > -1) return null;\n// re = /(free)|(100%)|(100 %)/ig;\n// if (msg.payload.title.search(re) == -1) return null;\nre = /(gog)|(steam)|(epic)|(humble)|(buy)/i;\nif (msg.payload.title.search(re) == -1) return null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "f908710754b3ba64"
            ]
        ]
    },
    {
        "id": "1b85bf46.53eef9",
        "type": "debug",
        "z": "2dbe54a8.332f04",
        "name": "first",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 535,
        "y": 140,
        "wires": [],
        "l": false
    },
    {
        "id": "d85f5c7c553769d3",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "prepare for split",
        "func": "if (msg.payload.data.children.length) {\n    flow.set(\"before\", msg.payload.data.children[0].data.name)\n}\n\n// Nettoye l'objet msg\ndelete msg.statusCode\ndelete msg.headers\ndelete msg.responseUrl\ndelete msg.redirectList\ndelete msg.retry\ndelete msg.responseCookies\n\n// Prepare l'objet a etre separe par posts\nmsg.payload = msg.payload.data.children.map(x => x.data)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 60,
        "wires": [
            [
                "bdef534b.d33f5"
            ]
        ]
    },
    {
        "id": "9a2c3803a22719e6",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "before",
        "func": "const before = flow.get(\"before\")\n\nconst url = \"https://www.reddit.com/r/GameDeals/search/.json\"\nconst payload = {\n    q: `\"free\" or \"100%\" or \"100 %\"`,\n    restrict_sr: \"on\",\n    t: \"week\",\n    sort: \"new\",\n    limit: 100\n}\nif (before) {\n    payload[\"before\"] = before\n}\n\nmsg.url = url\nmsg.payload = payload\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            [
                "8b96914.cfa247"
            ]
        ]
    },
    {
        "id": "f908710754b3ba64",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "prepare post",
        "func": "let post = {}\nlet payload = msg.payload\nmsg.post = post\n\npost.name = payload.name\npost.permalink = payload.permalink\npost.title = payload.title\npost.domain = payload.domain\npost.url = payload.url\npost.thumbnail = payload.thumbnail\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "1b85bf46.53eef9"
            ]
        ]
    },
    {
        "id": "daa6687653c0feea",
        "type": "inject",
        "z": "2dbe54a8.332f04",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 85,
        "y": 260,
        "wires": [
            [
                "0917b76e5a1bbcf1"
            ]
        ],
        "l": false
    },
    {
        "id": "0917b76e5a1bbcf1",
        "type": "function",
        "z": "2dbe54a8.332f04",
        "name": "Empty before",
        "func": "flow.set(\"before\", undefined)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9e5b56dd8c4458dd",
        "type": "feedparse",
        "z": "1c9d8fd6.7a925",
        "name": "HDTGM",
        "url": "https://feeds.simplecast.com/Ao0C24M8",
        "interval": "60",
        "ignorefirst": false,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "eee301fa151d5afd"
            ]
        ]
    },
    {
        "id": "b692c8aea70f56e0",
        "type": "http request",
        "z": "1c9d8fd6.7a925",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 420,
        "wires": [
            [
                "e046d8247f6f687d"
            ]
        ]
    },
    {
        "id": "f3cac49e20cd5ab8",
        "type": "file",
        "z": "1c9d8fd6.7a925",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 880,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "eee301fa151d5afd",
        "type": "function",
        "z": "1c9d8fd6.7a925",
        "name": "change",
        "func": "const re = /^(?<title>.*)@@(?<artist>.*)$/\nlet tags = {}\nlet year = moment(msg.article.pubDate)\nlet artist = \"\"\n\nmsg.title = msg.article.title\nlet title = msg.article.title.valueOf()\nlet matinee = (title.startsWith(\"Matinee Monday:\") || title.startsWith(\"Re-Release:\"))\ntitle = title\n    .replace(\"Matinee Monday:\", \"\")\n    .replace(\"Re-Release:\", \"\")\n    .replace(/\\s+/g, \" \")\n    .replace(/\\s*\\)$/, \"\")\n    .replace(/\\s*\\(?w\\/\\s*/, \"@@\")\n    .trim()\nif (re.test(title)) {\n    const groups = re.exec(title).groups\n    artist = groups.artist.trim()\n    title = groups.title.trim()\n}\n\nlet filename\nif (matinee) {\n    // filename = \"/podcasts/blabla - mm/\"\n    filename = \"/podcasts/How Did This Get Made - Matinee Monday/Matinee Monday_ \"\n    filename = filename + sanitize(title + \".mp3\")\n} else {\n    // filename = \"/podcasts/blabla/\"\n    filename = \"/podcasts/How Did This Get Made_/\"\n    filename = filename + sanitize(year.format('YYYY-MM-DD') + \" - \" + title + \".mp3\")\n}\nmsg.filename = filename\n\ntags.title = (matinee ? \"Matinee Monday: \":\"\") + title\ntags.artist = artist\ntags.album = \"How Did This Get Made?\"\ntags.performerInfo = \"Earwolf and Paul Scheer, June Diane Raphael, Jason Mantzoukas\"\ntags.year = year.format('YYYY-MM-DD')\ntags.trackNumber = year.format('YYYYMMDD')\ntags.image = \"/podcasts/How Did This Get Made_/folder.jpg\"\nmsg.tags = tags\nmsg.url = msg.article.enclosures[0].url\n\ndelete msg.article\ndelete msg.payload\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "sanitize",
                "module": "sanitize-filename"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 240,
        "y": 220,
        "wires": [
            [
                "a2d81e187fd86c28",
                "214c5a083f7d21a1"
            ]
        ]
    },
    {
        "id": "e046d8247f6f687d",
        "type": "function",
        "z": "1c9d8fd6.7a925",
        "name": "write tags",
        "func": "const tags = msg.tags\n\nlet buffer = msg.payload\nbuffer = NodeID3.write(tags, buffer)\nmsg.payload = buffer\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "NodeID3",
                "module": "node-id3"
            }
        ],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "f3cac49e20cd5ab8"
            ]
        ]
    },
    {
        "id": "a2d81e187fd86c28",
        "type": "debug",
        "z": "1c9d8fd6.7a925",
        "name": "change",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 355,
        "y": 180,
        "wires": [],
        "l": false
    },
    {
        "id": "214c5a083f7d21a1",
        "type": "function",
        "z": "1c9d8fd6.7a925",
        "name": "filter",
        "func": "let title = msg.title\n\nif (title == \"Find Full Archive of How Did This Get Made on Stitcher Premium\")\n    return null\nif (title.startsWith(\"Last Looks:\"))\n    return null\nif (fs.existsSync(msg.filename))\n    return null\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sanitize",
                "module": "sanitize"
            },
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "b692c8aea70f56e0",
                "3296fd95b3a73196"
            ]
        ]
    },
    {
        "id": "3296fd95b3a73196",
        "type": "debug",
        "z": "1c9d8fd6.7a925",
        "name": "filter",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 495,
        "y": 280,
        "wires": [],
        "l": false
    },
    {
        "id": "550e73879924ca9b",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Telecharge le podcast a toutes les heures",
        "info": "### How did this get made\n\nTelecharge le podcast a toutes les heures",
        "x": 340,
        "y": 120,
        "wires": []
    },
    {
        "id": "e5a1c823e1eb022d",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Prepare les informations et cree l'objet tags qui va contenir les tags ID3",
        "info": "",
        "x": 590,
        "y": 220,
        "wires": []
    },
    {
        "id": "da9d2e98fbfa89b5",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Filtre les articles non desires",
        "info": "",
        "x": 600,
        "y": 320,
        "wires": []
    },
    {
        "id": "d62cf278066096dd",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Telecharge les episodes qui n'ont pas ete filtrees",
        "info": "",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "4e2b888a326f5574",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Ecrit les tags ID3 dans le mp3",
        "info": "",
        "x": 940,
        "y": 520,
        "wires": []
    },
    {
        "id": "0d1e6801b78b0da2",
        "type": "comment",
        "z": "1c9d8fd6.7a925",
        "name": "Sauve le fichier mp3 sur le disque",
        "info": "",
        "x": 1120,
        "y": 620,
        "wires": []
    },
    {
        "id": "473c5d1e.3f773c",
        "type": "http in",
        "z": "790250a5.c8101",
        "name": "",
        "url": "/helloworld",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "57d73f0b.fd0e78"
            ]
        ]
    },
    {
        "id": "57d73f0b.fd0e78",
        "type": "template",
        "z": "790250a5.c8101",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Hello</title>\n\n\t<h1>Hello World</h1>\n</head>\n<body>\n\n<p> This is a demo on how to create webpages and dashboards </p>\n</body>\n</html>",
        "output": "str",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "44786f9d.5edfb8"
            ]
        ]
    },
    {
        "id": "44786f9d.5edfb8",
        "type": "http response",
        "z": "790250a5.c8101",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 280,
        "wires": []
    }
]